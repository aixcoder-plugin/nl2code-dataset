{
  "task_id": 0,
  "raw_nl": "Take a collection of Strings and return a combined string as a comma separated list with 'and' between the final pair. For example: [a, b, c] to \"a, b and c\".",
  "signature": "public String collectionToCommaDelimitedString(List<String> coll)",
  "line_num": 259
}
{
  "task_id": 1,
  "raw_nl": "Creates a padding string of a certain length",
  "signature": "public String createPadding(int length, char padChar)",
  "line_num": 322
}
{
  "task_id": 2,
  "raw_nl": "Create and returns a HttpURLConnection connection to a webpage",
  "signature": "public HttpURLConnection createHttpConnection(URL url, int connectTimeout, Map<String, String> requestProperties)",
  "line_num": 35
}
{
  "task_id": 3,
  "raw_nl": "Write content to the file. If file does not exist, it will create one.",
  "signature": "public void writeToFile(String content, String fileName)",
  "line_num": 344
}
{
  "task_id": 4,
  "raw_nl": "Close Reader. If object is null it is ignored",
  "signature": "public void close(Reader reader)",
  "line_num": 272
}
{
  "task_id": 5,
  "raw_nl": "max() that works on three integers. Like many of the other max() functions in this class",
  "signature": "public float max(float a, float b, float c) ",
  "line_num": 114
}
{
  "task_id": 6,
  "raw_nl": "put a short value into a byte array with specific offset",
  "signature": "public void putShort(byte[] data, short value, int offset)",
  "line_num": 95
}
{
  "task_id": 7,
  "raw_nl": "从 http 服务拉取配置文件并解析为Properties 对象",
  "signature": "public Properties getProperties(String url)",
  "line_num": 250
}
{
  "task_id": 8,
  "raw_nl": "给一个数组，找出最大值并且返回。",
  "signature": "public int findMaxNumber(int[] nums)",
  "line_num": 253
}
{
  "task_id": 9,
  "raw_nl": "将 Date 类型转为时间字符串，格式为 format",
  "signature": "public String date2String(final Date date, final DateFormat format)",
  "line_num": 366
}
{
  "task_id": 10,
  "raw_nl": "Looks through the backups directory and assembles a list of all json backup files found. ",
  "signature": "public List<String> getBackupFiles(String dir)",
  "line_num": 103
}
{
  "task_id": 11,
  "raw_nl": "Rearranges the elements of the specified subarray in random order.",
  "signature": "public void shuffle(int[] array)",
  "line_num": 306
}
{
  "task_id": 12,
  "raw_nl": "Retrieves the value by specified int index of the given List.",
  "signature": "public String getValue(List<String> list, int index)",
  "line_num": 11
}
{
  "task_id": 13,
  "raw_nl": "Returns a string, consisting of given length random char from given alphabet. ",
  "signature": "public String randomString(int length, String alphabet)",
  "line_num": 263
}
{
  "task_id": 14,
  "raw_nl": "用1到n随机初始化二维数组",
  "signature": "public void init(int[][] arr, int n) ",
  "line_num": 286
}
{
  "task_id": 15,
  "raw_nl": "Copy a file from source path to destination path",
  "signature": "public void copyFile(String sourcePath, String destPath)",
  "line_num": 402
}
{
  "task_id": 16,
  "raw_nl": "Get a hashCode for the real vector. All NaN values have the same hash code.",
  "signature": "public int hashCode(double[] vector)",
  "line_num": 52
}
{
  "task_id": 17,
  "raw_nl": "Parses character set name to Charset object",
  "signature": "public Charset charsetForName(String charsetName)",
  "line_num": 311
}
{
  "task_id": 18,
  "raw_nl": "Reads up to len bytes of data from this input stream into an array of bytes",
  "signature": "public byte[] readBytes(java.io.InputStream in, int len)",
  "line_num": 24
}
{
  "task_id": 19,
  "raw_nl": "Parses query string to Map from an url.",
  "signature": "public Map<String, String> parseQueryString(String queryString)",
  "line_num": 307
}
{
  "task_id": 20,
  "raw_nl": "Returns the value of an array by index, or null if the array has no value at that index.",
  "signature": "public Object get(Object[] array, int index)",
  "line_num": 320
}
{
  "task_id": 21,
  "raw_nl": "Set the additional (undeclared) property with the specified name and value. If the property does not already exist, create it otherwise replace it.",
  "signature": "public void putAdditionalProperty(String key, Object value, Map<String, Object> additionalProperties)",
  "line_num": 34
}
{
  "task_id": 22,
  "raw_nl": "Read the base64 encoded image data from a JPEG image.",
  "signature": "public String readImageData(String filename)",
  "line_num": 75
}
{
  "task_id": 23,
  "raw_nl": "Returns the distance for the two given point",
  "signature": "public float distance(float x0, float y0, float x1, float y1)",
  "line_num": 54
}
{
  "task_id": 24,
  "raw_nl": "Writes a collection of Strings to a File, overwriting any previous file contents. Each String is converted into a line in the File.",
  "signature": "public void writeFile(Collection<String> lines, File file)",
  "line_num": 69
}
{
  "task_id": 25,
  "raw_nl": "Generate a hex string for the specified bytes.",
  "signature": "public final String toHex(byte[] byteArr)",
  "line_num": 100
}
{
  "task_id": 26,
  "raw_nl": "获取相应文件filepath的input stream",
  "signature": "public java.io.InputStream getInputStream(String filepath)",
  "line_num": 7
}
{
  "task_id": 27,
  "raw_nl": "获取类上具有指定注解的接口的名称，如果有多个，则以第一个为准 找不到符合条件的接口则返回 clazz 类的名称",
  "signature": "public String getInterfaceName(Class<?> clazz, Class<? extends Annotation> annotation)",
  "line_num": 91
}
{
  "task_id": 28,
  "raw_nl": "Split the given sequence with the given delimiter and return list of values.",
  "signature": "public java.util.List<String> split(String sequence, String delimiter)",
  "line_num": 362
}
{
  "task_id": 29,
  "raw_nl": "This returns the euclidean distance of two vectors sum(i=1,n) (q_i - p_i)^2",
  "signature": "public double euclideanDistance(double[] p, double[] q)",
  "line_num": 358
}
{
  "task_id": 30,
  "raw_nl": "Returns the entry associated with the specified key in map.",
  "signature": "public <K,V> Map.Entry<K, V> getEntry(Map<K,V> map, K key)",
  "line_num": 78
}
{
  "task_id": 31,
  "raw_nl": "Returns the index of the first occurrence of the specified element in this list, returns -1 if the element is not found",
  "signature": "public int indexOf(int[] array, int element) ",
  "line_num": 281
}
{
  "task_id": 32,
  "raw_nl": "Returns the minimum value in an array.",
  "signature": "public int min(int[] array)",
  "line_num": 32
}
{
  "task_id": 33,
  "raw_nl": "Returns the sum of logarithms, which is Sum( Log(x[i]) ).",
  "signature": "public double logSum(double[] x)",
  "line_num": 317
}
{
  "task_id": 34,
  "raw_nl": "Do a simple bubble sort to sort the server ids in ascending order.",
  "signature": "public void sortServers(int[] serverIds)",
  "line_num": 111
}
{
  "task_id": 35,
  "raw_nl": "Ensure that an object reference passed as a parameter to the calling method is not null.",
  "signature": "public void ensureNotNull(Object obj)",
  "line_num": 243
}
{
  "task_id": 36,
  "raw_nl": "Extract the filename from the given path.",
  "signature": "public String extractFileName(String path)",
  "line_num": 300
}
{
  "task_id": 37,
  "raw_nl": "Fill 1D matrix with random numbers.",
  "signature": "public void fillMatrix_1D(double[] m)",
  "line_num": 315
}
{
  "task_id": 38,
  "raw_nl": "Find the occurence of the given key in the given array. Linear search, worst case running time is O(n).",
  "signature": "public int linearSearch(int[] arr, int key) ",
  "line_num": 334
}
{
  "task_id": 39,
  "raw_nl": "Generate a not existing temporary file in specified dir.",
  "signature": "public String generateTempFile(String dir)",
  "line_num": 338
}
{
  "task_id": 40,
  "raw_nl": "Get one character of index i from a given string buffer.",
  "signature": "public char getChar(StringBuffer sb, int i)",
  "line_num": 124
}
{
  "task_id": 41,
  "raw_nl": "将map中所有的key转为大写",
  "signature": "public Map<String, Object> getAllUpperCase(Map<String, Object> map)",
  "line_num": 89
}
{
  "task_id": 42,
  "raw_nl": "得到距离当前时间前一年的时间 @Title: getLastYearDate",
  "signature": "public String getLastYearDate()",
  "line_num": 352
}
{
  "task_id": 43,
  "raw_nl": "更新url中的参数(保证参数不重复)",
  "signature": "public String updateUrl(String url, String key, String value)",
  "line_num": 271
}
{
  "task_id": 44,
  "raw_nl": "移除 map 中的 null 或者 空字符串",
  "signature": "public void removeNullValue(Map<String, Object> map)",
  "line_num": 249
}
{
  "task_id": 45,
  "raw_nl": "获取某个时间data的年份",
  "signature": "public int getYear(Date date)",
  "line_num": 368
}
{
  "task_id": 46,
  "raw_nl": "Element-by-element matrix multiplication in place, A = A*B ",
  "signature": "public void matrixMultiply(double[][] A, double[][] B)",
  "line_num": 371
}
{
  "task_id": 47,
  "raw_nl": "通过反射获取某个类的对象内所有的 public 成员变量, 包括该类的基类",
  "signature": "public List<Field> getFields(Class<?> clazz)",
  "line_num": 372
}
{
  "task_id": 48,
  "raw_nl": "Adds all of the elements in collection to the Set.",
  "signature": "public void addAll(Set<Integer> set, Collection<Integer> collection)",
  "line_num": 373
}
{
  "task_id": 49,
  "raw_nl": "Helper function to convert a long number into a byte array (least significant byte first).",
  "signature": "public byte[] longToBytes(long x)",
  "line_num": 375
}
{
  "task_id": 50,
  "raw_nl": "将byte数组转化为16进制字符串",
  "signature": "public String bytesToHexString(byte[] src)",
  "line_num": 379
}
{
  "task_id": 51,
  "raw_nl": "Returns a hash code value for this bit array.",
  "signature": "public int hashCode(byte[] byteArr)",
  "line_num": 380
}
{
  "task_id": 52,
  "raw_nl": "Removes the entry with the specified key from this map if present.",
  "signature": "public void remove(Map<Integer, String> mapObj, Integer key)",
  "line_num": 381
}
{
  "task_id": 53,
  "raw_nl": "Convert a primitive input array into its object array version (e.g. from int[] to Integer[]).",
  "signature": "public Integer[] toObjectArray(int[] array)",
  "line_num": 383
}
{
  "task_id": 54,
  "raw_nl": "Converting object to JSON string. If errors appears throw MeshinException and RuntimeException.",
  "signature": "public String toJson(Object object)",
  "line_num": 384
}
{
  "task_id": 55,
  "raw_nl": "判断字符串是否只含字母和数字",
  "signature": "public boolean isLetterOrDigit(String str)",
  "line_num": 386
}
{
  "task_id": 56,
  "raw_nl": "判断是否只含字母",
  "signature": "public boolean isLetter(char c)",
  "line_num": 387
}
{
  "task_id": 57,
  "raw_nl": "Join 2 path elements if path separator not present at the end of first path element，else return the first element.",
  "signature": "public String joinPath(String path1, String path2)",
  "line_num": 388
}
{
  "task_id": 58,
  "raw_nl": "Converts an int into an array of byte using the default (little endian, Lsb0) byte and bit ordering.",
  "signature": "public byte[] intToByteArray(int value)",
  "line_num": 389
}
{
  "task_id": 60,
  "raw_nl": "convert byte array to a hex string",
  "signature": "public String bytesToHex(byte[] bytes)",
  "line_num": 393
}
{
  "task_id": 61,
  "raw_nl": "Print a float and then flush the output stream.",
  "signature": "public void print(float x,OutputStream out)",
  "line_num": 394
}
{
  "task_id": 62,
  "raw_nl": "Calculates combinatorial number C(n,m). ",
  "signature": "public int combinatorial(int n, int m)",
  "line_num": 397
}
{
  "task_id": 63,
  "raw_nl": "检验用户名是否合法，只能包括a-z,A-Z,0-9和下划线_，不能以下划线结尾 用户名有最小长度和最大长度限制，比如用户名必须是4-20位",
  "signature": "public boolean checkUsername(String username)",
  "line_num": 398
}
{
  "task_id": 64,
  "raw_nl": "得到现在时间",
  "signature": "public String getStringToday(String format)",
  "line_num": 401
}
{
  "task_id": 65,
  "raw_nl": "return the last day of the date's month of specified string value in format: yyyy-MM",
  "signature": "public Date getMonthLastDay(String dateString)",
  "line_num": 302
}
{
  "task_id": 66,
  "raw_nl": "Merges the given two lists to a new list, but eliminating duplicates elements.",
  "signature": "public <T> ArrayList<T> merge(ArrayList<T> list1, ArrayList<T> list2)",
  "line_num": 82
}
{
  "task_id": 67,
  "raw_nl": "Multiplies the vector by the transpose of the given matrix.",
  "signature": "public double[] multiplyTranspose(double[] vector, double[][] matrix)",
  "line_num": 2
}
{
  "task_id": 68,
  "raw_nl": "Removes and returns last element in list, return null if empty.",
  "signature": "public String removeLast(ArrayList<String> list)",
  "line_num": 20
}
{
  "task_id": 69,
  "raw_nl": "Returns the largest value in linked list.",
  "signature": "public int getMax(LinkedList<Integer> list)",
  "line_num": 262
}
{
  "task_id": 70,
  "raw_nl": "Calculate the elapsed time between two times specified in milliseconds.",
  "signature": "public long elapsedTime(Calendar start, Calendar end)",
  "line_num": 364
}
{
  "task_id": 71,
  "raw_nl": "Compute the CRC32 of an array of bytes.",
  "signature": "public long crc32(byte[] bytes)",
  "line_num": 318
}
{
  "task_id": 72,
  "raw_nl": "Create an instance of a clazz using the current thread context ClassLoader.",
  "signature": "public <T> T newInstance(Class<T> clazz)",
  "line_num": 93
}
{
  "task_id": 73,
  "raw_nl": "Delete data from start until end index (end inclusive) of a object List.",
  "signature": "public <T> void delete(List<T> list, int start, int end) ",
  "line_num": 56
}
{
  "task_id": 74,
  "raw_nl": "Get the intersection point of two lines.",
  "signature": "public Point getIntersection(Line line1, Line line2)",
  "line_num": 67
}
{
  "task_id": 75,
  "raw_nl": "Get the number of days for the given month in the given year.",
  "signature": "public int getDaysInMonth(int year, int month)",
  "line_num": 275
}
{
  "task_id": 76,
  "raw_nl": "得到filepath路径下第一层目录结构中所有的class文件",
  "signature": "public List<String> getClassFileNames(String filepath)",
  "line_num": 369
}
{
  "task_id": 77,
  "raw_nl": "打开文件filename，并返回文件输入流",
  "signature": "public FileInputStream openFile(String filename)",
  "line_num": 328
}
{
  "task_id": 78,
  "raw_nl": "用str2替换字符串str中第一个出现的str1",
  "signature": "public String replaceFirst(String str, String str1, String str2) ",
  "line_num": 251
}
{
  "task_id": 79,
  "raw_nl": "Writes certain bytes from the specified byte array starting from an offset to this output stream.",
  "signature": "public void write(byte[] b, int off, int len, OutputStream outputStream)",
  "line_num": 116
}
{
  "task_id": 80,
  "raw_nl": "随机生成[origin, bound)范围之内的一个int值",
  "signature": "public int randomInt(int origin, int bound)",
  "line_num": 265
}
{
  "task_id": 81,
  "raw_nl": "上传一个文件至指定路径pathname下",
  "signature": "public void uploadFile(String pathname, String filename)",
  "line_num": 376
}
{
  "task_id": 82,
  "raw_nl": "Debug helper function that returns the diff of two property maps, only displaying the key that is different and in which map it exists compared to the other map,example:map:key1,key2 map2:key1,key2,key3",
  "signature": "public String diff(java.util.Map<String, String> map1, java.util.Map<String, String> map2) ",
  "line_num": 385
}
{
  "task_id": 83,
  "raw_nl": "Returns a new, immutable collection containing the names of all entities within the directory denoted by the current path",
  "signature": "public List<String> getFiles(String dir)",
  "line_num": 395
}
{
  "task_id": 84,
  "raw_nl": "Rotate this a two-dimensional point around Y axis with the given angle in radians.",
  "signature": "public Point rotateY(double angle, Point point)",
  "line_num": 399
}
{
  "task_id": 85,
  "raw_nl": "If the string passed in is not blank or null and did not end with the trailing value, then appended the trailing value to it and return the result ",
  "signature": "public String appendTrailing(String str, String trailing)",
  "line_num": 400
}
{
  "task_id": 86,
  "raw_nl": "Returns true if the collection contains an element for the key.",
  "signature": "public boolean containsKey(Collection<String> collection, String key)",
  "line_num": 126
}
{
  "task_id": 87,
  "raw_nl": "Returns true if the given object is an instance of the class or interface specified.",
  "signature": "public boolean isInstanceOf(Object object, Class<?> type)",
  "line_num": 106
}
{
  "task_id": 88,
  "raw_nl": "将16进制字符串转10进制",
  "signature": "public int hexStringToInt(String hexString)",
  "line_num": 23
}
{
  "task_id": 89,
  "raw_nl": "Add two integers, checking for overflow.",
  "signature": "public bool checkOverflow(int x, int y)",
  "line_num": 22
}
{
  "task_id": 90,
  "raw_nl": "Add the value to the HashSet given by map.get(key), creating a new HashSet if the HashSet is null",
  "signature": "public void addToSet(Map<String, HashSet<Integer>> map, String key, Integer value)",
  "line_num": 323
}
{
  "task_id": 91,
  "raw_nl": "Calculate and return the average of the two values rounded DOWN.",
  "signature": "public int average(int a, int b)",
  "line_num": 336
}
{
  "task_id": 92,
  "raw_nl": "Check if #MIN_VALUE <= value <= #MAX_VALUE and if not an IllegalArgumentException is thrown.",
  "signature": "public void checkRange(int value, int min, int max)",
  "line_num": 273
}
{
  "task_id": 93,
  "raw_nl": "Check whether the String is a valid Java number",
  "signature": "public boolean isNumber(String str)",
  "line_num": 26
}
{
  "task_id": 94,
  "raw_nl": "Choose a pseudo-random element from the specified array.",
  "signature": "public int random(int[] array)",
  "line_num": 241
}
{
  "task_id": 95,
  "raw_nl": "Compare two java objects for equality.",
  "signature": "public boolean equals(Object o1, Object o2)",
  "line_num": 258
}
{
  "task_id": 96,
  "raw_nl": "Compute the product of this matrix and the given column vector.",
  "signature": "public double[] product(double[] columnVector,double[][] matrix)",
  "line_num": 304
}
{
  "task_id": 97,
  "raw_nl": "Concatenate two arrays of T type",
  "signature": "public <T> T[] concat(T[] a, T[] b)",
  "line_num": 77
}
{
  "task_id": 98,
  "raw_nl": "Convert the text '&' mnemonic string to text string. The '&' symbol is treated as the mnemonic pointer. The double \"&&\" symbols are treated as the single '&'. For example the string \"&Look && Feel\" is converted to \"Look & Feel\".",
  "signature": "public String convertMnemonicString(String text)",
  "line_num": 289
}
{
  "task_id": 99,
  "raw_nl": "Convert a boolean value into a string.",
  "signature": "public String boolToString(boolean b)",
  "line_num": 268
}
{
  "task_id": 100,
  "raw_nl": "Convert an arbitrary text encoding to its canonical name.",
  "signature": "public String canonicalEncodingName(String encoding)",
  "line_num": 298
}
{
  "task_id": 101,
  "raw_nl": "Create a copy of the Integer array.",
  "signature": "public int[] copy(int[] arr)",
  "line_num": 60
}
{
  "task_id": 102,
  "raw_nl": "Returns the current number of entries in the map.",
  "signature": "public int size(Map<String, String> map)",
  "line_num": 404
}
{
  "task_id": 103,
  "raw_nl": "Returns true if two doubles are considered equal. Tests if the absolute difference between the two doubles has a difference less then a given double (epsilon)Returns true if two doubles are considered equal. Tests if the absolute difference between the two doubles has a difference less then a given double (epsilon)",
  "signature": "public boolean equals(double a, double b, double epsilon)",
  "line_num": 405
}
{
  "task_id": 104,
  "line_num": 1011,
  "raw_nl": "Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if necessary.",
  "raw_code": "final ByteVector put12(final int byteValue, final int shortValue) {\n    int currentLength = length;\n    if (currentLength + 3 > data.length) {\n        enlarge(3);\n    }\n    byte[] currentData = data;\n    currentData[currentLength++] = (byte) byteValue;\n    currentData[currentLength++] = (byte) (shortValue >>> 8);\n    currentData[currentLength++] = (byte) shortValue;\n    length = currentLength;\n    return this;\n}",
  "signature": "public void putShort(byte[] data, byte b, short s)"
}
{
  "task_id": 105,
  "line_num": 1018,
  "raw_nl": "Advances the iterator either forward or backward the specified number of steps. Negative values move backward, and positive values move forward. This is equivalent to repeatedly calling next() or previous().",
  "raw_code": "@Override\npublic int next(int n) {\n    int result = current();\n    while (n > 0) {\n        result = handleNext();\n        --n;\n    }\n    while (n < 0) {\n        result = previous();\n        ++n;\n    }\n    return result;\n}",
  "signature": "public int next(Iterator<Integer> iterator, int n)"
}
{
  "task_id": 106,
  "line_num": 1028,
  "raw_nl": "一维数组转为二维数组",
  "raw_code": "public static int[][] arrayToMatrix(int[] m, int width, int height) {\n    int[][] result = new int[height][width];\n    for (int i = 0; i < height; i++) {\n        for (int j = 0; j < width; j++) {\n            int p = j * height + i;\n            result[i][j] = m[p];\n        }\n    }\n    return result;\n}",
  "signature": "public int[][] arrayToMatrix(int[] m, int width, int height)"
}
{
  "task_id": 107,
  "line_num": 1043,
  "raw_nl": "Verifies that the given array is not null or empty.",
  "raw_code": "public static int[] checkNotNullOrEmpty(@Nullable int[] array) {\n    if (array == null) {\n        throw new NullPointerException();\n    }\n    if (array.length == 0) {\n        throw new IllegalArgumentException();\n    }\n    return array;\n}",
  "signature": "public boolean checkNotNullOrEmpty(int[] array)"
}
{
  "task_id": 108,
  "line_num": 1170,
  "raw_nl": "Removes all white spaces from a string A whitespace is identified using the Java method Character.isWhiteSpace",
  "raw_code": "public static String removeWhiteSpaces(String s) {\n    StringBuilder sb = new StringBuilder(s);\n    int j = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (Character.isWhitespace(c) == false) {\n            sb.setCharAt(j, c);\n            j++;\n        }\n    }\n    sb.setLength(j);\n    return sb.toString();\n}",
  "signature": "public String removeAllWhiteSpaces(String str)"
}
{
  "task_id": 109,
  "line_num": 1187,
  "raw_nl": "subtract b from a",
  "raw_code": "public static String[] sub(String[] a, String[] b) {\n    TreeSet<String> s = new TreeSet<>(Arrays.asList(a));\n    s.removeAll(Arrays.asList(b));\n    if (s.size() != a.length) {\n        return s.toArray(new String[s.size()]);\n    } else {\n        return a;\n    }\n}",
  "signature": "public String[] sub(String[] a, String[] b)"
}
{
  "task_id": 110,
  "line_num": 1230,
  "raw_nl": "Converts the string argument into a float value.",
  "raw_code": "public static float parseFloat(String lexicalXSDFloat) {\n    if (theConverter == null)\n        initConverter();\n    return theConverter.parseFloat(lexicalXSDFloat);\n}",
  "signature": "public float parseFloat(String floatStr)"
}
{
  "task_id": 111,
  "line_num": 1286,
  "raw_nl": "Return true if the local path is a Windows absolute path.",
  "raw_code": "private static boolean isWindowsAbsolutePath(String systemId) {\n    if (!isAbsolutePath(systemId))\n        return false;\n    // On Windows, an absolute path starts with \"[drive_letter]:\\\".\n    if (systemId.length() > 2 && systemId.charAt(1) == ':' && Character.isLetter(systemId.charAt(0)) && (systemId.charAt(2) == '\\\\' || systemId.charAt(2) == '/'))\n        return true;\n    else\n        return false;\n}",
  "signature": "private boolean isWindowsAbsolutePath(String path)"
}
{
  "task_id": 112,
  "line_num": 1310,
  "raw_nl": "Calculates the distance between two points in high-dimensional space.",
  "raw_code": "public static double length(double[] p0, double[] p1) {\n    double[] v = Geometry.createVector(p0, p1);\n    return length(v);\n}",
  "signature": "public double length(double[] p0, double[] p1)"
}
{
  "task_id": 113,
  "line_num": 1320,
  "raw_nl": "This function takes an array of words, and returns a string with all the words in the separated by a space.",
  "raw_code": "private String getStringfromStringArray(String[] array) {\n    if (array == null) {\n        return null;\n    }\n    String s = new String();\n    for (int i = 0; i < array.length; i++) {\n        if (i == 0) {\n            s += array[i];\n        } else {\n            s += \" \" + array[i];\n        }\n    }\n    return s;\n}",
  "signature": "public String getStringfromStringArray(String[] array)"
}
{
  "task_id": 114,
  "line_num": 3530,
  "raw_nl": "Check whether a file is actually a valid zip",
  "raw_code": "public static boolean isValidZip(File zip) {\n    try {\n        ZipFile zf = new ZipFile(zip);\n        zf.close();\n        return true;\n    } catch (IOException e) {\n        throw new IORuntimeException(\"Not a valid zip: \" + zip, e);\n    }\n}",
  "signature": "public boolean isValidZip(File zip)"
}
{
  "task_id": 115,
  "line_num": 3587,
  "raw_nl": "Parse a list of longs into strings.",
  "raw_code": "private static String[] toTimestampStrs(long[] timestamps) {\n    if (timestamps == null) {\n        return null;\n    }\n    String[] result = new String[timestamps.length];\n    for (int i = 0; i < timestamps.length; ++i) {\n        result[i] = Long.toString(timestamps[i]);\n    }\n    return result;\n}",
  "signature": "public String[] toTimestampStrs(long[] timestamps)"
}
{
  "task_id": 116,
  "line_num": 3595,
  "raw_nl": "Change the size of this array. Content between indexes 0 and min(size(), newSize) will be preserved.",
  "raw_code": "@Override\npublic void resize(long newSize) {\n    final int numPages = numPages(newSize);\n    if (numPages > pages.length) {\n        pages = Arrays.copyOf(pages, ArrayUtil.oversize(numPages, RamUsageEstimator.NUM_BYTES_OBJECT_REF));\n    }\n    for (int i = numPages - 1; i >= 0 && pages[i] == null; --i) {\n        pages[i] = newLongPage(i);\n    }\n    for (int i = numPages; i < pages.length && pages[i] != null; ++i) {\n        pages[i] = null;\n        releasePage(i);\n    }\n    this.size = newSize;\n}",
  "signature": "public void resize(int[] arr,long newSize)"
}
{
  "task_id": 117,
  "line_num": 3644,
  "raw_nl": "概述：截取指定长度的数组",
  "raw_code": "public static byte[] subBytes(byte[] src, int pos, int count) {\n    byte[] dest = new byte[count];\n    System.arraycopy(src, pos, dest, 0, count);\n    return dest;\n}",
  "signature": "public byte[] subBytes(byte[] src, int pos, int count)"
}
{
  "task_id": 118,
  "line_num": 3820,
  "raw_nl": "返回不小于输入值value的最小整数",
  "raw_code": "@FunctionMethod(value = \"ceil\", alias = \"ceil\", comment = \"返回不小于输入值value的最小整数\")\npublic Double ceil(IMessage message, FunctionContext context, @FunctionParamter(value = \"Integer\", comment = \"代表要求值的Integer常量\") Integer number) {\n    Double result = null;\n    if (number == null) {\n        return result;\n    }\n    result = Math.ceil(number);\n    return result;\n}",
  "signature": "public int floor(double val)"
}
{
  "task_id": 119,
  "line_num": 3881,
  "raw_nl": "保留两位小数",
  "raw_code": "public static String getPrice(String price, int formatType) {\n    if (isNotEmpty(price, true) == false) {\n        return getPrice(0, formatType);\n    }\n    String correctPrice = \"\";\n    String s;\n    for (int i = 0; i < price.length(); i++) {\n        s = price.substring(i, i + 1);\n        if (\".\".equals(s) || isNumer(s)) {\n            correctPrice += s;\n        }\n    }\n    Log.i(TAG, \"getPrice  <<<<<<<<<<<<<<<<<< correctPrice =  \" + correctPrice);\n    if (correctPrice.contains(\".\")) {\n        if (correctPrice.endsWith(\".\")) {\n            correctPrice = correctPrice.replaceAll(\".\", \"\");\n        }\n    }\n    Log.i(TAG, \"getPrice correctPrice =  \" + correctPrice + \" >>>>>>>>>>>>>>>>\");\n    return isNotEmpty(correctPrice, true) ? getPrice(new BigDecimal(0 + correctPrice), formatType) : getPrice(0, formatType);\n}",
  "signature": "public String formatDouble(double val)"
}
{
  "task_id": 120,
  "line_num": 3888,
  "raw_nl": "Compares the two specified double values,return 1 if the first value is greater than the second value,-1 if the first value is less than the second value,0 if the two values are equal. There are two special cases: Double.NaN is equal to Double.NaN and it is greater than any other double value, including Double.POSITIVE_INFINITY; +0.0d is greater than -0.0d",
  "raw_code": "public static int compare(double double1, double double2) {\n    // Non-zero, non-NaN checking.\n    if (double1 > double2) {\n        return 1;\n    }\n    if (double2 > double1) {\n        return -1;\n    }\n    if (double1 == double2 && 0.0d != double1) {\n        return 0;\n    }\n    // NaNs are equal to other NaNs and larger than any other double\n    if (isNaN(double1)) {\n        if (isNaN(double2)) {\n            return 0;\n        }\n        return 1;\n    } else if (isNaN(double2)) {\n        return -1;\n    }\n    long d1 = doubleToRawLongBits(double1);\n    long d2 = doubleToRawLongBits(double2);\n    return (int) ((d1 >> 63) - (d2 >> 63));\n}",
  "signature": "public int compare(double double1, double double2)"
}
{
  "task_id": 121,
  "line_num": 3890,
  "raw_nl": "Get the index of the next slash.",
  "raw_code": "public static int getNextSlash(String path, int index) {\n    assert isValid(path) : \"Invalid path [\" + path + \"]\";\n    return path.indexOf('/', index);\n}",
  "signature": "public int getNextSlash(String path, int index)"
}
{
  "task_id": 122,
  "line_num": 3894,
  "raw_nl": "Returns true iff all entries of (all subarrays of) the input array are >= 0. Returns true if the array is non-null, but empty",
  "raw_code": "private boolean isNonNegative(long[][] in) {\n    for (int i = 0; i < in.length; i++) {\n        for (int j = 0; j < in[i].length; j++) {\n            if (in[i][j] < 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
  "signature": "public boolean isNonNegative(long[][] in)"
}
{
  "task_id": 123,
  "line_num": 3897,
  "raw_nl": "Returns maximum possible integer, less or equal than oldValue, divisible by quantum.",
  "raw_code": "public static int floor(int x, int quantum) {\n    int dx = (x > 0) || (x % quantum == 0) ? 0 : -1;\n    return (x / quantum + dx) * quantum;\n}",
  "signature": "public int floor(int x, int quantum)"
}
{
  "task_id": 124,
  "line_num": 3911,
  "raw_nl": "Appends an item to the list.",
  "raw_code": "public void append(Value v) {\n    if (length == items.length) {\n        Value[] t = new Value[length * 2];\n        System.arraycopy(items, 0, t, 0, length);\n        items = t;\n    }\n    items[length++] = v;\n}",
  "signature": "public void append(List<String> list, String item)"
}
{
  "task_id": 125,
  "line_num": 6004,
  "raw_nl": "判断某个日期属于本月的第几天",
  "raw_code": "public static int getDaysByMonth(String dateTime) throws ParseException {\n    Calendar cal = Calendar.getInstance();\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n    Date date = dateFormat.parse(dateTime);\n    cal.setTime(date);\n    int day = cal.get(Calendar.DAY_OF_MONTH);\n    return day;\n}",
  "signature": "public int getDaysByMonth(String dateTime)"
}
{
  "task_id": 126,
  "line_num": 6028,
  "raw_nl": "Unzip the contents of the given zip in the given directory (create it if it doesn't exist)",
  "raw_code": "public static void unzip(String zipPath, String destDirPath) throws IOException {\n    InputStream zipIn = new FileInputStream(zipPath);\n    byte[] buf = new byte[8192];\n    File destDir = new File(destDirPath);\n    ZipInputStream zis = new ZipInputStream(zipIn);\n    FileOutputStream fos = null;\n    try {\n        ZipEntry zEntry;\n        while ((zEntry = zis.getNextEntry()) != null) {\n            // if it is empty directory, create it\n            if (zEntry.isDirectory()) {\n                new File(destDir, zEntry.getName()).mkdirs();\n                continue;\n            }\n            // if it is a file, extract it\n            String filePath = zEntry.getName();\n            int lastSeparator = filePath.lastIndexOf(\"/\");\n            String fileDir = \"\";\n            if (lastSeparator >= 0) {\n                fileDir = filePath.substring(0, lastSeparator);\n            }\n            // create directory for a file\n            new File(destDir, fileDir).mkdirs();\n            // write file\n            File outFile = new File(destDir, filePath);\n            fos = new FileOutputStream(outFile);\n            int n = 0;\n            while ((n = zis.read(buf)) >= 0) {\n                fos.write(buf, 0, n);\n            }\n            fos.close();\n        }\n    } catch (IOException ioe) {\n        if (fos != null) {\n            try {\n                fos.close();\n            } catch (IOException ioe2) {\n            }\n        }\n    } finally {\n        try {\n            zipIn.close();\n            if (zis != null)\n                zis.close();\n        } catch (IOException ioe) {\n        }\n    }\n}",
  "signature": "public void unzip(String zipPath, String destDirPath)"
}
{
  "task_id": 127,
  "line_num": 6053,
  "raw_nl": "returns a array including given range. [start, end)",
  "raw_code": "public static int[] range(int start, int end) {\n    int[] results = new int[end - start];\n    int index = 0;\n    for (int i = start; i < end; i++) {\n        results[index++] = i;\n    }\n    return results;\n}",
  "signature": "public int[] range(int start, int end)"
}
{
  "task_id": 128,
  "line_num": 6076,
  "raw_nl": "Clear the given calendar, setting to zero all time values less than or equal to that of the given field. For example, clearing to Calendar#HOUR will floor the time to nearest hour which occurred before or at the given time (e.g., 1:32 --> 1:30).",
  "raw_code": "public static Calendar clearTo(Calendar c, int field) {\n    int i = CALENDAR_FIELDS.length - 1;\n    for (; i >= 1 && field != CALENDAR_FIELDS[i]; i--) {\n        int val = (CALENDAR_FIELDS[i] == Calendar.DATE ? 1 : 0);\n        c.set(CALENDAR_FIELDS[i], val);\n    }\n    if (isMultiYear(field)) {\n        int y = c.get(Calendar.YEAR);\n        y = -field * (y / -field);\n        c.set(Calendar.YEAR, y);\n    }\n    return c;\n}",
  "signature": "public Calendar clearTo(Calendar c, int field)"
}
{
  "task_id": 129,
  "line_num": 6094,
  "raw_nl": "获取当前系统时间 minute分钟后 的时间",
  "raw_code": "public static String getNowDate(int minute) {\n    SimpleDateFormat formatter = new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");\n    Calendar c = Calendar.getInstance();\n    c.set(Calendar.MINUTE, c.get(Calendar.MINUTE) + minute);\n    return formatter.format(c.getTime());\n}",
  "signature": "public String getNowDate(int minute)"
}
{
  "task_id": 130,
  "line_num": 6096,
  "raw_nl": "Check the given value is in int range.",
  "raw_code": "public static boolean isDecimalWithinIntRange(DecimalValue decimalValue) {\n    BigDecimal value = decimalValue.value;\n    return value.compareTo(RuntimeConstants.BINT_MAX_VALUE_BIG_DECIMAL_RANGE_MAX) < 0 && value.compareTo(RuntimeConstants.BINT_MIN_VALUE_BIG_DECIMAL_RANGE_MIN) > 0;\n}",
  "signature": "public boolean isDecimalWithinIntRange(DecimalValue decimalValue)"
}
{
  "task_id": 131,
  "line_num": 6121,
  "raw_nl": "Produces a new double array containing the elements between the start and end indices. The start index is inclusive, the end index exclusive. Null array input produces null output.",
  "raw_code": "public static double[] subarray(final double[] array, int startIndexInclusive, int endIndexExclusive) {\n    if (array == null) {\n        return null;\n    }\n    if (startIndexInclusive < 0) {\n        startIndexInclusive = 0;\n    }\n    if (endIndexExclusive > array.length) {\n        endIndexExclusive = array.length;\n    }\n    final int newSize = endIndexExclusive - startIndexInclusive;\n    if (newSize <= 0) {\n        return EMPTY_DOUBLE_ARRAY;\n    }\n    final double[] subarray = new double[newSize];\n    System.arraycopy(array, startIndexInclusive, subarray, 0, newSize);\n    return subarray;\n}",
  "signature": "public double[] subarray(final double[] array, int startIndexInclusive, int endIndexExclusive)"
}
{
  "task_id": 132,
  "line_num": 6212,
  "raw_nl": "将微博时间字符串转换成yyyyMMddHHmmSS 微博时间字符串有： xx分钟前 今天 11:53 07月09日 13:36 2010-09-23 19:55:38",
  "raw_code": "public static String parseDate(String weiboTimeStr) {\n    // 使用默认时区和语言环境获得一个日历。\n    Calendar currentTime = Calendar.getInstance();\n    if (weiboTimeStr.contains(\"分钟前\")) {\n        int minutes = Integer.parseInt(weiboTimeStr.split(\"分钟前\")[0]);\n        currentTime.add(Calendar.MINUTE, -minutes);\n        return simpleDateTimeFormat.format(currentTime.getTime());\n    } else if (weiboTimeStr.startsWith(\"今天\")) {\n        String[] time = weiboTimeStr.split(\"天\")[1].split(\":\");\n        int hour = Integer.parseInt(time[0].substring(1));\n        int minute = Integer.parseInt(time[1].substring(0, 2));\n        currentTime.set(Calendar.HOUR_OF_DAY, hour);\n        currentTime.set(Calendar.MINUTE, minute);\n        return simpleDateTimeFormat.format(currentTime.getTime());\n    } else if (weiboTimeStr.contains(\"月\")) {\n        String[] time = weiboTimeStr.split(\"日\")[1].split(\":\");\n        int dayIndex = weiboTimeStr.indexOf(\"日\") - 2;\n        int month = Integer.parseInt(weiboTimeStr.substring(0, 2));\n        int day = Integer.parseInt(weiboTimeStr.substring(dayIndex, dayIndex + 2));\n        int hour = Integer.parseInt(time[0].substring(1));\n        int minute = Integer.parseInt(time[1].substring(0, 2));\n        currentTime.set(Calendar.MONTH, month - 1);\n        currentTime.set(Calendar.DAY_OF_MONTH, day);\n        currentTime.set(Calendar.HOUR_OF_DAY, hour);\n        currentTime.set(Calendar.MINUTE, minute);\n        return simpleDateTimeFormat.format(currentTime.getTime());\n    } else if (weiboTimeStr.contains(\"-\")) {\n        return weiboTimeStr.replace(\"-\", \"\").replace(\":\", \"\").replace(\" \", \"\").substring(0, 14);\n    } else {\n        logger.info(\">> Error: Unknown time format - \" + weiboTimeStr);\n    }\n    return null;\n}",
  "signature": "public String parseDate(String weiboTimeStr)"
}
{
  "task_id": 133,
  "line_num": 6215,
  "raw_nl": "返回当月开始时间",
  "raw_code": "public static long currentMonthStartUnixTime() {\n    Calendar monthStartCalendar = Calendar.getInstance();\n    monthStartCalendar.set(Calendar.DAY_OF_MONTH, 1);\n    monthStartCalendar.set(Calendar.HOUR_OF_DAY, 0);\n    monthStartCalendar.set(Calendar.MINUTE, 0);\n    monthStartCalendar.set(Calendar.SECOND, 0);\n    return monthStartCalendar.getTimeInMillis();\n}",
  "signature": "public long currentMonthStartUnixTime()"
}
{
  "task_id": 134,
  "line_num": 6224,
  "raw_nl": "Multiply Long and Double numbers.",
  "raw_code": "private static Long multiply(Long number, Double multiplier) {\n    if (number == 0 || multiplier == 0) {\n        return 0L;\n    }\n    double bigNumber = Double.max(Math.abs(number), Math.abs(multiplier));\n    double smallNumber = Double.min(Math.abs(number), Math.abs(multiplier));\n    double maxMultiplier = Long.MAX_VALUE / bigNumber;\n    if (smallNumber < maxMultiplier) {\n        return Double.valueOf(number * multiplier).longValue();\n    } else {\n        if ((number > 0 && multiplier < 0) || (number < 0 && multiplier > 0)) {\n            return Long.MIN_VALUE;\n        } else {\n            return Long.MAX_VALUE;\n        }\n    }\n}",
  "signature": "public Long multiply(Long number, Double multiplier)"
}
{
  "task_id": 135,
  "line_num": 6225,
  "raw_nl": "Multiply two Short numbers.",
  "raw_code": "private static Short multiply(Short a, Short b) {\n    if (a == 0 || b == 0) {\n        return 0;\n    }\n    int bigNumber = Integer.max(Math.abs(a), Math.abs(b));\n    int smallNumber = Integer.min(Math.abs(a), Math.abs(b));\n    int maxMultiplier = Short.MAX_VALUE / bigNumber;\n    if (smallNumber < maxMultiplier) {\n        return Integer.valueOf(a * b).shortValue();\n    } else {\n        if ((a > 0 && b < 0) || (a < 0 && b > 0)) {\n            return Short.MIN_VALUE;\n        } else {\n            return Short.MAX_VALUE;\n        }\n    }\n}",
  "signature": "public Short multiply(Short a, Short b)"
}
{
  "task_id": 136,
  "line_num": 6230,
  "raw_nl": "Attempt to find a field on the supplied Class with the supplied name and/or type. Searches all superclasses up to Object.",
  "raw_code": "public static Field findField(Class clazz, String name, Class type) {\n    Class searchType = clazz;\n    while (!Object.class.equals(searchType) && searchType != null) {\n        Field[] fields = searchType.getDeclaredFields();\n        for (int i = 0; i < fields.length; i++) {\n            Field field = fields[i];\n            if ((name == null || name.equals(field.getName())) && (type == null || type.equals(field.getType()))) {\n                return field;\n            }\n        }\n        searchType = searchType.getSuperclass();\n    }\n    return null;\n}",
  "signature": "public Field findField(Class clazz, String name, Class type)"
}
{
  "task_id": 137,
  "line_num": 6319,
  "raw_nl": "获取request的IP地址",
  "raw_code": "public String getIPAddr(HttpServletRequest request) {\n    // 先从nginx自定义配置获取\n    String ip = request.getHeader(\"X-real-ip\");\n    if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n        ip = request.getHeader(\"x-forwarded-for\");\n    }\n    if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n        ip = request.getHeader(\"Proxy-Client-IP\");\n    }\n    if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n        ip = request.getHeader(\"WL-Proxy-Client-IP\");\n    }\n    if (ip == null || ip.length() == 0 || \"unknown\".equalsIgnoreCase(ip)) {\n        ip = request.getRemoteAddr();\n    }\n    return ip;\n}",
  "signature": "public String getIPAddr(HttpServletRequest request)"
}
{
  "task_id": 138,
  "line_num": 6377,
  "raw_nl": "Convert byte array to binary String",
  "raw_code": "public static String toBinary(final byte[] pBytes) {\n    String ret = null;\n    if (pBytes != null && pBytes.length > 0) {\n        BigInteger val = new BigInteger(bytesToStringNoSpace(pBytes), HEXA);\n        StringBuilder build = new StringBuilder(val.toString(2));\n        // left pad with 0 to fit byte size\n        for (int i = build.length(); i < pBytes.length * BitUtils.BYTE_SIZE; i++) {\n            build.insert(0, 0);\n        }\n        ret = build.toString();\n    }\n    return ret;\n}",
  "signature": "public String toBinary(byte[] pBytes) "
}
{
  "task_id": 139,
  "line_num": 6412,
  "raw_nl": "Convert arguments of a method (signature) to an array of Type objects.",
  "raw_code": "public static Type[] getArgumentTypes(String signature) {\n    ArrayList<Type> vec = new ArrayList<Type>();\n    int index;\n    Type[] types;\n    try {\n        // Read all declarations between for `(' and `)'\n        if (signature.charAt(0) != '(')\n            throw new ClassFormatException(\"Invalid method signature: \" + signature);\n        // current string position\n        index = 1;\n        while (signature.charAt(index) != ')') {\n            vec.add(getType(signature.substring(index)));\n            // update position\n            index += consumed_chars;\n        }\n    } catch (StringIndexOutOfBoundsException e) {\n        // Should never occur\n        throw new ClassFormatException(\"Invalid method signature: \" + signature);\n    }\n    types = new Type[vec.size()];\n    vec.toArray(types);\n    return types;\n}",
  "signature": "public Type[] getArgumentTypes(String signature)"
}
{
  "task_id": 140,
  "line_num": 6524,
  "raw_nl": "Convert a partial buffer to a String.",
  "raw_code": "public static String toString(ByteBuffer buffer, int position, int length, Charset charset) {\n    if (buffer == null)\n        return null;\n    byte[] array = buffer.hasArray() ? buffer.array() : null;\n    if (array == null) {\n        ByteBuffer ro = buffer.asReadOnlyBuffer();\n        ro.position(position);\n        ro.limit(position + length);\n        byte[] to = new byte[length];\n        ro.get(to);\n        return new String(to, 0, to.length, charset);\n    }\n    return new String(array, buffer.arrayOffset() + position, length, charset);\n}",
  "signature": "public String toString(ByteBuffer buffer, int position, int length, Charset charset)"
}
{
  "task_id": 141,
  "line_num": 6599,
  "raw_nl": "两个时间之间相差距离多少天,时间格式yyyy-MM-dd",
  "raw_code": "public static long getDistanceDays(String str1, String str2) throws Exception {\n    DateFormat df = new SimpleDateFormat(\"yyyy-MM-dd\");\n    Date one;\n    Date two;\n    long days = 0;\n    try {\n        one = df.parse(str1);\n        two = df.parse(str2);\n        long time1 = one.getTime();\n        long time2 = two.getTime();\n        long diff;\n        if (time1 < time2) {\n            diff = time2 - time1;\n        } else {\n            diff = time1 - time2;\n        }\n        days = diff / (1000 * 60 * 60 * 24);\n    } catch (ParseException e) {\n        e.printStackTrace();\n    }\n    return days;\n}",
  "signature": "public long getDistanceDays(String str1, String str2)"
}
{
  "task_id": 142,
  "line_num": 6638,
  "raw_nl": "获取url的顶级域名",
  "raw_code": "public static String getTopDomain(String url) {\n    if (StringUtils.isEmpty(url)) {\n        return null;\n    }\n    try {\n        if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n            url = \"http://\" + url;\n        }\n        // 获取值转换为小写\n        String host = new URL(url).getHost().toLowerCase();\n        Matcher matcher = pattern.matcher(host);\n        while (matcher.find()) {\n            return matcher.group();\n        }\n    } catch (MalformedURLException e) {\n        e.printStackTrace();\n    }\n    return null;\n}",
  "signature": "public String getTopDomain(String url)"
}
{
  "task_id": 143,
  "line_num": 8500,
  "raw_nl": "Returns true if the given String matches to one of the provided Patterns, false otherwise.",
  "raw_code": "public static boolean matchesPattern(String _string, Pattern[] _patterns) {\n    if (_string == null)\n        return false;\n    for (Pattern p : _patterns) {\n        final Matcher m = p.matcher(_string);\n        if (m.matches()) {\n            return true;\n        }\n    }\n    return false;\n}",
  "signature": "public boolean matchesPattern(String _string, Pattern[] _patterns)"
}
{
  "task_id": 144,
  "line_num": 8506,
  "raw_nl": "Extracts all the files in the given zip file to the input destination path. If zip file does not exist or destination path is invalid then an exception is thrown.",
  "raw_code": "public void extractAll(String destPath, UnzipParameters unzipParameters) throws ZipException {\n    if (!Zip4jUtil.isStringNotNullAndNotEmpty(destPath)) {\n        throw new ZipException(\"output path is null or invalid\");\n    }\n    if (!Zip4jUtil.checkOutputFolder(destPath)) {\n        throw new ZipException(\"invalid output path\");\n    }\n    if (zipModel == null) {\n        readZipInfo();\n    }\n    // Throw an exception if zipModel is still null\n    if (zipModel == null) {\n        throw new ZipException(\"Internal error occurred when extracting zip file\");\n    }\n    if (progressMonitor.getState() == ProgressMonitor.STATE_BUSY) {\n        throw new ZipException(\"invalid operation - Zip4j is in busy state\");\n    }\n    Unzip unzip = new Unzip(zipModel);\n    unzip.extractAll(unzipParameters, destPath, progressMonitor, runInThread);\n}",
  "signature": "public void extractAll(String destPath, String zipName)"
}
{
  "task_id": 145,
  "line_num": 8550,
  "raw_nl": "判断两个数组的内容是否相等 用于equals的比较",
  "raw_code": "public static boolean equals(Object[] array, Object[] other) {\n    int length = array.length;\n    if (length != other.length) {\n        return false;\n    }\n    for (int i = 0; i < length; i++) {\n        if (!KernelObject.equals(array[i], other[i])) {\n            return false;\n        }\n    }\n    return true;\n}",
  "signature": "public boolean equals(Object[] array, Object[] other)"
}
{
  "task_id": 146,
  "line_num": 8553,
  "raw_nl": "Returns a set with all unique methodNames of methods.",
  "raw_code": "public static Set<String> getMethods(ClassLoader classLoader, String className) {\n    Set<String> targetMethods = new HashSet<>();\n    if (!methods.containsKey(classLoader))\n        return targetMethods;\n    for (String currentClass : methods.get(classLoader).keySet()) {\n        if (currentClass.equals(className) || currentClass.startsWith(className + \"$\"))\n            targetMethods.addAll(methods.get(classLoader).get(currentClass));\n    }\n    return targetMethods;\n}",
  "signature": "public Set<String> getMethods(ClassLoader classLoader, String className)"
}
{
  "task_id": 147,
  "line_num": 8577,
  "raw_nl": "Returns the pid of the task",
  "raw_code": "String getPid(TaskRunner t) {\n    if (t != null && t.getTask() != null) {\n        if (t.getTask().isMapTask()) {\n            JVMId id = mapJvmManager.runningTaskToJvm.get(t);\n            if (id != null) {\n                return mapJvmManager.jvmIdToPid.get(id);\n            }\n        } else {\n            JVMId id = reduceJvmManager.runningTaskToJvm.get(t);\n            if (id != null) {\n                return reduceJvmManager.jvmIdToPid.get(id);\n            }\n        }\n    }\n    return null;\n}",
  "signature": "String getPid(FutureTask t)"
}
{
  "task_id": 148,
  "line_num": 8596,
  "raw_nl": "Swaps the elements at the specified positions in the specified list. (If the specified positions are equal, invoking this method leaves the list unchanged.)",
  "raw_code": "public static <E> void swap(@NonNull List<E> list, int i, int j) {\n    Preconditions.checkArgument(i > 0, StringTemplates.indexStyleSupplier(\"index i is illegal : {}\"), i);\n    Preconditions.checkArgument(j > 0, StringTemplates.indexStyleSupplier(\"index j is illegal : {}\"), j);\n    final List<E> l = list;\n    l.set(i, l.set(j, l.get(i)));\n}",
  "signature": "public <E> void swap(List<E> list, int i, int j)"
}
{
  "task_id": 149,
  "line_num": 8606,
  "raw_nl": "Get the radian between current line(determined by point A and B) and horizontal line.",
  "raw_code": "public static float getRadian(Point A, Point B) {\n    float lenA = B.x - A.x;\n    float lenB = B.y - A.y;\n    float lenC = (float) Math.sqrt(lenA * lenA + lenB * lenB);\n    float radian = (float) Math.acos(lenA / lenC);\n    radian = radian * (B.y < A.y ? -1 : 1);\n    return radian;\n}",
  "signature": "public float getRadian(Point A, Point B)"
}
{
  "task_id": 150,
  "line_num": 8681,
  "raw_nl": "Skips over and discards n bytes of data from the input stream",
  "raw_code": "public synchronized long skip(long n) throws IOException {\n    if (n <= 0) {\n        return 0;\n    }\n    seek(getPos() + n);\n    return n;\n}",
  "signature": "public long skip(long n)"
}
{
  "task_id": 151,
  "line_num": 8693,
  "raw_nl": "Converts from an int array to an Integer array.",
  "raw_code": "public static Integer[] asObjectArray(int[] array) {\n    Integer[] objectArray = new Integer[array.length];\n    for (int i = 0; i < array.length; i++) objectArray[i] = array[i];\n    return objectArray;\n}",
  "signature": "public Integer[] asObjectArray(int[] array)"
}
{
  "task_id": 152,
  "line_num": 8707,
  "raw_nl": "生成32位的MD5码",
  "raw_code": "public static String toMd5Code(String str) {\n    String result = null;\n    if (null != str) {\n        try {\n            MessageDigest messageDigest = MessageDigest.getInstance(\"MD5\");\n            messageDigest.update(str.getBytes());\n            byte[] values = messageDigest.digest();\n            StringBuffer strBuffer = new StringBuffer();\n            for (byte value : values) {\n                int bt = value & 0xff;\n                if (bt < 16)\n                    strBuffer.append(0);\n                strBuffer.append(Integer.toHexString(bt));\n            }\n            result = strBuffer.toString();\n        } catch (Exception e) {\n            throw new UtilsRuntimeException(\"生成32位的MD5码失败[\" + e.toString() + \"]\");\n        }\n    }\n    return result;\n}",
  "signature": "public String toMd5Code(String str)"
}
{
  "task_id": 153,
  "line_num": 8796,
  "raw_nl": "计算 C2 = M xor t",
  "raw_code": "private static byte[] calculateC2(byte[] m, byte[] t) {\n    if (m == null || m.length != t.length) {\n        return null;\n    }\n    byte[] bufOut = new byte[m.length];\n    for (int i = 0; i < m.length; i++) {\n        bufOut[i] = (byte) (m[i] ^ t[i]);\n    }\n    return bufOut;\n}",
  "signature": "public byte[] calculateC2(byte[] m, byte[] t)"
}
{
  "task_id": 154,
  "line_num": 8804,
  "raw_nl": "获取资源文件的url",
  "raw_code": "public static URL getUrlFile(String fileName) {\n    URL url = null;\n    if (fileName != null) {\n        if (fileName.startsWith(Constants.FILE_SEPARATOR)) {\n            url = ResourceUtil.class.getResource(fileName);\n        } else {\n            url = ClassLoader.getSystemClassLoader().getResource(fileName);\n        }\n    }\n    return url;\n}",
  "signature": "public URL getUrlFile(String fileName)"
}
{
  "task_id": 155,
  "line_num": 8821,
  "raw_nl": "Check if the given value type is a date-time type (TIME, DATE, TIMESTAMP, TIMESTAMP_TZ).",
  "raw_code": "public static boolean isDateTimeType(int type) {\n    switch(type) {\n        case Value.TIME:\n        case Value.DATE:\n        case Value.TIMESTAMP:\n        case Value.TIMESTAMP_TZ:\n            return true;\n        default:\n            return false;\n    }\n}",
  "signature": "public boolean isDateTimeType(int type)"
}
{
  "task_id": 156,
  "line_num": 8859,
  "raw_nl": "Adds a given vector (array) to another one. * Every element of the second array (missing element is treated to be zero) is added to the corresponding element (if not missing) of the first array. <VAR>arrayA</VAR> content is altered. *",
  "raw_code": "public static final void addTo(float[] arrayA, float[] arrayB) throws NullPointerException {\n    int offset = arrayA.length, len;\n    if (arrayA != arrayB) {\n        if ((len = arrayB.length) <= offset)\n            offset = len;\n        while (offset-- > 0) arrayA[offset] += arrayB[offset];\n    }\n    while (offset-- > 0) arrayA[offset] *= 2;\n}",
  "signature": "public void addTo(float[] arrayA, float[] arrayB)"
}
{
  "task_id": 157,
  "line_num": 8860,
  "raw_nl": "Searches backward for value in a given array",
  "raw_code": "public static final int lastIndexOf(float value, int index, float[] array) throws NullPointerException {\n    if (index < 0)\n        index = -1;\n    int bits;\n    if ((bits = array.length) <= index)\n        index = bits - 1;\n    index++;\n    if (value == 0.0F) {\n        bits = Float.floatToIntBits(value);\n        while (index-- > 0 && ((value = array[index]) != 0.0F || Float.floatToIntBits(value) != bits)) ;\n    } else if (value != value) {\n        bits = Float.floatToIntBits(value);\n        do {\n            if (--index < 0)\n                break;\n            value = array[index];\n        } while (value == value || Float.floatToIntBits(value) != bits);\n    } else\n        while (index-- > 0 && array[index] != value) ;\n    return index;\n}",
  "signature": "public int lastIndexOf(float value, int index, float[] array)"
}
{
  "task_id": 158,
  "line_num": 8861,
  "raw_nl": "得到一个普通的线程池",
  "raw_code": "public static ThreadPoolProxy getNormalPool() {\n    if (mNormalPool == null) {\n        synchronized (ThreadPoolFactory.class) {\n            if (mNormalPool == null) {\n                mNormalPool = new ThreadPoolProxy(5, 5, 3000);\n            }\n        }\n    }\n    return mNormalPool;\n}",
  "signature": "public ThreadPoolExecutor getNormalPool()"
}
{
  "task_id": 159,
  "line_num": 8943,
  "raw_nl": "将对象装换为map",
  "raw_code": "public static <T> Map<String, Object> beanToMap(T bean) {\n    Map<String, Object> map = Maps.newHashMap();\n    if (bean != null) {\n        BeanMap beanMap = BeanMap.create(bean);\n        for (Object key : beanMap.keySet()) {\n            map.put(key + \"\", beanMap.get(key));\n        }\n    }\n    return map;\n}",
  "signature": "public <T> Map<String, Object> beanToMap(T bean)"
}
{
  "task_id": 160,
  "line_num": 9018,
  "raw_nl": "随机抽取指定数量的用户，作为中奖用户",
  "raw_code": "public List<BetUser> doDrawRandom(List<BetUser> list, int count) {\n    // 集合数量很小直接返回\n    if (list.size() <= count)\n        return list;\n    // 乱序集合\n    Collections.shuffle(list);\n    // 取出指定数量的中奖用户\n    List<BetUser> prizeList = new ArrayList<>(count);\n    for (int i = 0; i < count; i++) {\n        prizeList.add(list.get(i));\n    }\n    return prizeList;\n}",
  "signature": "public List<String> doDrawRandom(List<String> users, int count)"
}
{
  "task_id": 161,
  "line_num": 9171,
  "raw_nl": "Returns the geometric center of this sequence of points",
  "raw_code": "default GamaPoint getCenter() {\n    final GamaPoint p = new GamaPoint();\n    addCenterTo(p);\n    return p;\n}",
  "signature": "public Point getCenter(List<Point> points)"
}
{
  "task_id": 162,
  "line_num": 9353,
  "raw_nl": "括号匹配检测.",
  "raw_code": "public static boolean checkbracket(String str) {\n    Stack<Character> stackCheck = new Stack<Character>();\n    boolean booFlag = true;\n    for (int i = 0; i < str.length(); i++) {\n        char ch = str.charAt(i);\n        switch(ch) {\n            case '(':\n                stackCheck.push(ch);\n                break;\n            case ')':\n                if (!stackCheck.isEmpty()) {\n                    char chx = stackCheck.pop();\n                    if (ch == ')' && chx != '(') {\n                        booFlag = false;\n                    }\n                } else {\n                    booFlag = false;\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    if (!stackCheck.isEmpty()) {\n        booFlag = false;\n    }\n    return booFlag;\n}",
  "signature": "public boolean checkbracket(String str)"
}
{
  "task_id": 163,
  "line_num": 9373,
  "raw_nl": "Move a file or directory from source to destination, recursively copying subdirectories.",
  "raw_code": "public static void move(FileSystem fs, Path file, Path src, Path dest) throws IOException {\n    Path destFilePath = pathInDestination(file, src, dest);\n    if (fs.isFile(file)) {\n        if (fs.exists(destFilePath)) {\n            if (!fs.delete(destFilePath, true)) {\n                throw new IllegalArgumentException(\"Could not remove existing file \" + destFilePath);\n            }\n        }\n        if (!fs.rename(file, destFilePath)) {\n            throw new IllegalArgumentException(\"Could not move \" + file + \" to \" + destFilePath);\n        }\n    } else if (fs.getFileStatus(file).isDir()) {\n        FileStatus[] statuses = fs.listStatus(file);\n        fs.mkdirs(destFilePath);\n        if (statuses != null) {\n            for (FileStatus status : statuses) {\n                move(fs, status.getPath(), src, dest);\n            }\n        }\n    }\n}",
  "signature": "public void move(Path src, Path dest)"
}
{
  "task_id": 164,
  "line_num": 9415,
  "raw_nl": "Reverse a Map into a ValueSetMap, where each original value is mapped to the set of all its original keys.",
  "raw_code": "public static <K, V> ValueSetMap<V, K> reverseMapIntoValueSetMap(Map<K, V> map) {\n    ValueSetMap<V, K> reversedMap = new SimpleValueSetMap<V, K>();\n    for (K origKey : map.keySet()) {\n        V origValue = map.get(origKey);\n        reversedMap.put(origValue, origKey);\n    }\n    return reversedMap;\n}",
  "signature": "public <K, V> Map<V, Set<K> > reverseMapIntoValueSetMap(Map<K, V> map)"
}
{
  "task_id": 165,
  "line_num": 9506,
  "raw_nl": "Decode base64 string to bytes",
  "raw_code": "public static byte[] base64decode(String base64string) {\n    byte[] rv = null;\n    rv = Base64.getDecoder().decode(base64string);\n    return rv;\n}",
  "signature": "public byte[] base64decode(String base64string)"
}
{
  "task_id": 166,
  "line_num": 9590,
  "raw_nl": "通过反射为对象的对应字段注入值",
  "raw_code": "private static <T> T initByReflect(String name, String value, T t) {\n    if (t == null)\n        throw new RuntimeException(\"null object\");\n    if (name == null || \"\".equals(name))\n        throw new RuntimeException(\"empty name\");\n    Class<?> clazz = t.getClass();\n    Method setter, getter;\n    try {\n        String methodStr = name.substring(0, 1).toUpperCase() + name.substring(1);\n        // 如果名称是cancel，则调用isCancel()方法，主要是为了语义上的直观\n        getter = clazz.getMethod((\"cancel\".equals(name) ? \"is\" : \"get\") + methodStr, new Class<?>[] {});\n        setter = clazz.getMethod(\"set\" + methodStr, getter.getReturnType());\n        if (\"action\".equals(name))\n            // 根据StepAction类中的map来获取名称对应的StepAction（枚举）实例\n            setter.invoke(t, StepAction.action(value));\n        else if (\"cancel\".equals(name))\n            setter.invoke(t, \"true\".equals(value) ? true : false);\n        else if (\"details\".equals(name))\n            setter.invoke(t, parseDetail(value));\n        else\n            setter.invoke(t, value);\n    } catch (Exception e) {\n    }\n    return t;\n}",
  "signature": "public <T> T initByReflect(String name, String value, T t)"
}
{
  "task_id": 167,
  "line_num": 9607,
  "raw_nl": "将数组转为 List",
  "raw_code": "public static <T> List<T> array2List(T[] array) {\n    ArrayList<T> list = new ArrayList<T>(array.length);\n    for (int i = 0; i < array.length; i++) {\n        list.add(array[i]);\n    }\n    return list;\n}",
  "signature": "public <T> List<T> array2List(T[] array)"
}
{
  "task_id": 168,
  "line_num": 9630,
  "raw_nl": "获取过去7天的时期，格式为yymmdd",
  "raw_code": "public static List<String> getWeekDate() {\n    List<String> dates = new ArrayList<>();\n    SimpleDateFormat simpleDateFormat = new SimpleDateFormat(\"yyyyMMdd\", Locale.getDefault());\n    for (int i = 0; i < 7; i++) {\n        Calendar calendar = Calendar.getInstance();\n        calendar.add(Calendar.DAY_OF_YEAR, 1 - i);\n        dates.add(simpleDateFormat.format(calendar.getTime()));\n    }\n    return dates;\n}",
  "signature": "public List<String> getWeekDate()"
}

{
  "task_id": 169,
  "line_num": 9662,
  "raw_nl": "Returns the total number of bytes remaining in the buffer array.",
  "raw_code": "static long remaining(ByteBuffer[] buffers) {\n    long size = 0;\n    for (ByteBuffer buffer : buffers) {\n        size += buffer.remaining();\n    }\n    return size;\n}",
  "signature": "public long remaining(ByteBuffer[] buffers)"
}
{
  "task_id": 170,
  "line_num": 9752,
  "raw_nl": "返回y年m月d日对应的农历.返回格式为某年某月某日 ?",
  "raw_code": "/**\n */\npublic String getLunarDate(int year_log, int month_log, int day_log, boolean isday) {\n    // @SuppressWarnings(\"unused\")\n    int yearCyl, monCyl, dayCyl;\n    // int leapMonth = 0;\n    String nowadays;\n    Date baseDate = null;\n    Date nowaday = null;\n    try {\n        baseDate = chineseDateFormat.parse(\"1900年1月31日\");\n    } catch (ParseException e) {\n        // To change body of catch statement use\n        e.printStackTrace();\n        // Options | File Templates.\n    }\n    nowadays = year_log + \"年\" + month_log + \"月\" + day_log + \"日\";\n    try {\n        nowaday = chineseDateFormat.parse(nowadays);\n    } catch (ParseException e) {\n        // To change body of catch statement use\n        e.printStackTrace();\n        // Options | File Templates.\n    }\n    // 求出和1900年1月31日相差的天数\n    int offset = (int) ((nowaday.getTime() - baseDate.getTime()) / 86400000L);\n    dayCyl = offset + 40;\n    monCyl = 14;\n    // 用offset减去每农历年的天数\n    // 计算当天是农历第几天\n    // i最终结果是农历的年份\n    // offset是当年的第几天\n    int iYear, daysOfYear = 0;\n    for (iYear = 1900; iYear < 10000 && offset > 0; iYear++) {\n        daysOfYear = yearDays(iYear);\n        offset -= daysOfYear;\n        monCyl += 12;\n    }\n    if (offset < 0) {\n        offset += daysOfYear;\n        iYear--;\n        monCyl -= 12;\n    }\n    // 农历年份\n    year = iYear;\n    // 设置公历对应的农历年份\n    setYear(year);\n    yearCyl = iYear - 1864;\n    leapMonth = leapMonth(iYear);\n    leap = false;\n    // 用当年的天数offset,逐个减去每月（农历）的天数，求出当天是本月的第几天\n    int iMonth, daysOfMonth = 0;\n    for (iMonth = 1; iMonth < 13 && offset > 0; iMonth++) {\n        // 闰月\n        if (leapMonth > 0 && iMonth == (leapMonth + 1) && !leap) {\n            --iMonth;\n            leap = true;\n            daysOfMonth = leapDays(year);\n        } else\n            daysOfMonth = monthDays(year, iMonth);\n        offset -= daysOfMonth;\n        // 解除闰月\n        if (leap && iMonth == (leapMonth + 1))\n            leap = false;\n        if (!leap)\n            monCyl++;\n    }\n    // offset为0时，并且刚才计算的月份是闰月，要校正\n    if (offset == 0 && leapMonth > 0 && iMonth == leapMonth + 1) {\n        if (leap) {\n            leap = false;\n        } else {\n            leap = true;\n            --iMonth;\n            --monCyl;\n        }\n    }\n    // offset小于0时，也要校正\n    if (offset < 0) {\n        offset += daysOfMonth;\n        --iMonth;\n        --monCyl;\n    }\n    month = iMonth;\n    // 设置对应的阴历月份\n    setLunarMonth(chineseNumber[month - 1] + \"月\");\n    day = offset + 1;\n    if (!isday) {\n        for (int i = 0; i < solarHoliday.length; i++) {\n            // 返回公历节假日名称\n            // 节假日的日期\n            String sd = solarHoliday[i].split(\" \")[0];\n            // 节假日的名称\n            String sdv = solarHoliday[i].split(\" \")[1];\n            String smonth_v = month_log + \"\";\n            String sday_v = day_log + \"\";\n            String smd = \"\";\n            if (month_log < 10) {\n                smonth_v = \"0\" + month_log;\n            }\n            if (day_log < 10) {\n                sday_v = \"0\" + day_log;\n            }\n            smd = smonth_v + sday_v;\n            if (sd.trim().equals(smd.trim())) {\n                return sdv;\n            }\n        }\n        for (int i = 0; i < lunarHoliday.length; i++) {\n            // 返回农历节假日名称\n            // 节假日的日期\n            String ld = lunarHoliday[i].split(\" \")[0];\n            // 节假日的名称\n            String ldv = lunarHoliday[i].split(\" \")[1];\n            String lmonth_v = month + \"\";\n            String lday_v = day + \"\";\n            String lmd = \"\";\n            if (month < 10) {\n                lmonth_v = \"0\" + month;\n            }\n            if (day < 10) {\n                lday_v = \"0\" + day;\n            }\n            lmd = lmonth_v + lday_v;\n            if (ld.trim().equals(lmd.trim())) {\n                return ldv;\n            }\n        }\n    }\n    if (day == 1)\n        return chineseNumber[month - 1] + \"月\";\n    else\n        return getChinaDayString(day);\n}",
  "signature": "public String getLunarDate(int year_log, int month_log, int day_log)"
}
{
  "task_id": 171,
  "line_num": 9799,
  "raw_nl": "去掉浮点数多余的0",
  "raw_code": "public static String rvZeroAndDot(String s) {\n    if (s.isEmpty()) {\n        return null;\n    }\n    if (s.indexOf(\".\") > 0) {\n        s = s.replaceAll(\"0+?$\", \"\");\n        // 如最后一位是.则去掉\n        s = s.replaceAll(\"[.]$\", \"\");\n    }\n    return s;\n}",
  "signature": "public String rvZeroAndDot(String s)"
}
{
  "task_id": 172,
  "line_num": 9800,
  "raw_nl": "数值减法，字符串表示每一个数",
  "raw_code": "public static String bigDecimalSubtract(String str, String str1, int scale) {\n    BigDecimal bd = new BigDecimal(str);\n    BigDecimal bd1 = new BigDecimal(str1);\n    return rvZeroAndDot(bd.subtract(bd1).setScale(scale, BigDecimal.ROUND_DOWN).toPlainString());\n}",
  "signature": "public String bigDecimalSubtract(String str, String str1, int scale)"
}
{
  "task_id": 173,
  "line_num": 9854,
  "raw_nl": "Get the extension of a file. Return a null string is there is no extension.",
  "raw_code": "public static String getFileExtension(File file) {\n    String str = file.getName();\n    int i = str.lastIndexOf('.');\n    if (i > 0) {\n        return str.substring(i + 1);\n    } else {\n        return \"\";\n    }\n}",
  "signature": "public String getFileExtension(File file)"
}
{
  "task_id": 174,
  "line_num": 9889,
  "raw_nl": "判定一个字符串是不是整数",
  "raw_code": "public static boolean isInteger(String numberString) {\n    try {\n        Integer.parseInt(numberString);\n        return true;\n    } catch (NumberFormatException ex) {\n        return false;\n    }\n}",
  "signature": "public boolean isInteger(String numberString)"
}
{
  "task_id": 175,
  "line_num": 9925,
  "raw_nl": "Creates a Thread Factory that names Threads with the given format",
  "raw_code": "private ThreadFactory createThreadFactory(@NotNull final String nameFormat) {\n    checkNotNull(nameFormat, \"Thread Factory Name Format must not be null\");\n    return new ThreadFactoryBuilder().setNameFormat(nameFormat).build();\n}",
  "signature": "public ThreadFactory createThreadFactory(String nameFormat)"
}
{
  "task_id": 176,
  "line_num": 9948,
  "raw_nl": "Returns true if the bit at the given position is 1 and false otherwise.",
  "raw_code": "public boolean getBinaryState(int position) {\n    if (position < 1 || position > 32) {\n        throw new IllegalArgumentException(\"Position out of bound. Should be between 1 and 32.\");\n    }\n    return (((value >> (position - 1)) & 0x01) == 0x01);\n}",
  "signature": "public boolean getBinaryState(int position)"
}
{
  "task_id": 177,
  "line_num": 9972,
  "raw_nl": "获取当前进程的ID",
  "raw_code": "public static String getProcessId() {\n    // get name representing the running Java virtual machine.\n    String name = ManagementFactory.getRuntimeMXBean().getName();\n    String pid = name.split(\"@\")[0];\n    return pid;\n}",
  "signature": "public String getProcessId()"
}
{
  "task_id": 178,
  "line_num": 10049,
  "raw_nl": "Handles comparison between version numbers (the right way(TM))，bigger return 1 ，smaller return -1 and equals return 0. Examples of version strings: 1.6.7, 1.2_b10",
  "raw_code": "public static int versionCompare(String v1, String v2) {\n    Matcher v1Matcher = versionPattern.matcher(v1);\n    Matcher v2Matcher = versionPattern.matcher(v2);\n    if (!v1Matcher.matches() || !v2Matcher.matches()) {\n        throw new IllegalArgumentException(v1Matcher.matches() ? v2 : v1 + \" is not a proper version\" + \" string\");\n    }\n    String[] v1Prefix = v1Matcher.group(1).split(\"\\\\.\");\n    String[] v2Prefix = v2Matcher.group(1).split(\"\\\\.\");\n    for (int i = 0; i < v1Prefix.length; i++) {\n        if (v2Prefix.length <= i) {\n            // v1 > v2\n            return 1;\n        }\n        int compare = Integer.parseInt(v1Prefix[i]) - Integer.parseInt(v2Prefix[i]);\n        if (compare != 0) {\n            return compare;\n        }\n    }\n    // So far they are equal (or v2 is longer than v1)\n    if (v2Prefix.length == v1Prefix.length) {\n        // then it is up to the suffixes\n        return v1Matcher.group(2).compareTo(v2Matcher.group(2));\n    }\n    // v2 is greater than v1,\n    return -1;\n}",
  "signature": "public int versionCompare(String v1, String v2)"
}
{
  "task_id": 179,
  "line_num": 10092,
  "raw_nl": "通过key给指定的value加值,如果key不存在,则这是value为该值",
  "raw_code": "public Long incrBy(String key, Long integer) {\n    Jedis jedis = null;\n    Long res = null;\n    try {\n        jedis = jedisPool.getResource();\n        res = jedis.incrBy(key, integer);\n    } catch (Exception e) {\n        log.error(e.getMessage());\n    } finally {\n        returnResource(jedisPool, jedis);\n    }\n    return res;\n}",
  "signature": "public Long incrBy(Map<String,Long> valMap,String key, Long integer)"
}
{
  "task_id": 180,
  "line_num": 10221,
  "raw_nl": "Check if a string represents binary bytes (0/1, multiple of 8).",
  "raw_code": "private boolean isBin(String bin, Context context) {\n    if (bin != null && bin.length() % 8 == 0 && bin.matches(\"[0-1]+\")) {\n        return true;\n    }\n    Toast.makeText(context, R.string.info_not_bin_data, Toast.LENGTH_LONG).show();\n    return false;\n}",
  "signature": "public boolean isBin(String bin)"
}
{
  "task_id": 181,
  "line_num": 10300,
  "raw_nl": "通过反射, 获得Class定义中声明的泛型参数的类型. 如无法找到, 返回Object.class.",
  "raw_code": "public static Class getClassGenricType(final Class clazz, final int index) {\n    Type genType = clazz.getGenericSuperclass();\n    if (!(genType instanceof ParameterizedType)) {\n        logger.debug(clazz.getSimpleName() + \"'s superclass not ParameterizedType\");\n        return Object.class;\n    }\n    Type[] params = ((ParameterizedType) genType).getActualTypeArguments();\n    if (index >= params.length || index < 0) {\n        logger.debug(\"Index: \" + index + \", Size of \" + clazz.getSimpleName() + \"'s Parameterized Type: \" + params.length);\n        return Object.class;\n    }\n    if (!(params[index] instanceof Class)) {\n        logger.debug(clazz.getSimpleName() + \" not set the actual class on superclass generic parameter\");\n        return Object.class;\n    }\n    return (Class) params[index];\n}",
  "signature": "public Class getClassGenricType(Class clazz)"
}
{
  "task_id": 182,
  "line_num": 10366,
  "raw_nl": "滤掉词串中的空格、标点符号",
  "raw_code": "private String[] filter(String[] word_list) {\n    List<String> results = new ArrayList<String>();\n    for (String w : word_list) {\n        if (!FILTER_CHARS.contains(w)) {\n            results.add(w.toLowerCase());\n        }\n    }\n    return results.toArray(new String[results.size()]);\n}",
  "signature": "public String[] filter(String[] word_list)"
}
{
  "task_id": 183,
  "line_num": 10506,
  "raw_nl": "BigDecimal加法运算",
  "raw_code": "public static BigDecimal add(BigDecimal aVal, BigDecimal bVal) {\n    aVal = aVal == null ? BigDecimal.ZERO : aVal;\n    bVal = bVal == null ? BigDecimal.ZERO : bVal;\n    return aVal.add(bVal);\n}",
  "signature": "public BigDecimal add(BigDecimal aVal, BigDecimal bVal)"
}
{
  "task_id": 184,
  "line_num": 10558,
  "raw_nl": "For a given string, replaces all occurrences of chars 10 and 13 with \"\\\\n\" and \"\\\\r\" string literals, and adds quotes before and after the string. Additionally, if maxLen is greater than zero, truncates the string to that length if it's longer, adding \"...[length xyz]\" in the end",
  "raw_code": "public static String removeEndLinesAndAddQuotes(String s, int maxLen) {\n    if (maxLen > 0 && s.length() > maxLen) {\n        // Don't print very long strings fully\n        s = s.substring(0, maxLen - 16) + \" ...[length \" + s.length() + ']';\n    }\n    if (s.indexOf('\\n') == -1 && s.indexOf('\\r') == -1) {\n        return \"\\\"\" + s + \"\\\"\";\n    }\n    char[] dst = new char[s.length() * 2 + 2];\n    dst[0] = '\"';\n    int dstIdx = 1;\n    int len = s.length();\n    for (int i = 0; i < len; i++) {\n        char c = s.charAt(i);\n        if (c == '\\n') {\n            dst[dstIdx++] = '\\\\';\n            dst[dstIdx++] = 'n';\n        } else if (c == '\\r') {\n            dst[dstIdx++] = '\\\\';\n            dst[dstIdx++] = 'r';\n        } else {\n            dst[dstIdx++] = c;\n        }\n    }\n    dst[dstIdx++] = '\"';\n    return new String(dst, 0, dstIdx);\n}",
  "signature": "public String removeEndLinesAndAddQuotes(String s, int maxLen)"
}
{
  "task_id": 185,
  "line_num": 10638,
  "raw_nl": "return the given list of defined IP addresses. The example is: |- IPv4: 192.168.1.6 |- IPv4: 127.0.0.1 |- IPv6: fe80:0:0:0:221:5cff:fe1d:ffdf%3 |- IPv6: 0:0:0:0:0:0:0:1%1",
  "raw_code": "private void printOutDefinedIPs(List<String> definedIPs) {\n    List<String> ipList = new ArrayList<>();\n    for (String ip : definedIPs) {\n        if (ip.indexOf(':') != -1) {\n            ipList.add(\"|- IPv6: \" + ip);\n        } else {\n            ipList.add(\"|- IPv4: \" + ip);\n        }\n    }\n    Collections.sort(ipList);\n    for (String ip : ipList) {\n        log.info(ip);\n    }\n}",
  "signature": "public List<String> printOutDefinedIPs(List<String> definedIPs)"
}
{
  "task_id": 186,
  "line_num": 10958,
  "raw_nl": "Returns whether or no the JDK version is 1.7u40 and above.",
  "raw_code": "public static boolean isJdk7u40Above() {\n    checkJdkVersion();\n    return _currentVersion.compareVersion(1.7, 0, 40) >= 0;\n}",
  "signature": "public boolean isJdk7u40Above()"
}
