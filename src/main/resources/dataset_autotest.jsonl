{"task_id": 0, "raw_nl": "Take a collection of Strings and return a combined string as a comma separated list with 'and' between the final pair. For example: [a, b, c] to \"a, b and c\".", "signature": "public static String collectionToCommaDelimitedString(List<String> coll)"}
{"task_id": 1, "raw_nl": "Creates a padding string of a certain length", "signature": "public static String createPadding(int length, char padChar)"}
{"task_id": 2, "raw_nl": "Create and returns a HttpURLConnection connection to a webpage", "signature": "public static HttpURLConnection createHttpConnection(URL url, int connectTimeout, Map<String, String> requestProperties)"}
{"task_id": 3, "raw_nl": "Write content to the file. If file does not exist, it will create one.", "signature": "public static void writeToFile(String content, String fileName)"}
{"task_id": 4, "raw_nl": "Close Reader. If object is null it is ignored", "signature": "public static void close(Reader reader)"}
{"task_id": 5, "raw_nl": "max() that works on three integers. Like many of the other max() functions in this class", "signature": "public static float max(float a, float b, float c) "}
{"task_id": 6, "raw_nl": "put a short value into a byte array with specific offset", "signature": "public static void putShort(byte[] data, short value, int offset)"}
{"task_id": 7, "raw_nl": "从 http 服务拉取配置文件并解析为Properties 对象", "signature": "public Properties getProperties(String url)"}
{"task_id": 8, "raw_nl": "给一个数组，找出最大值并且返回。", "signature": "public static int findMaxNumber(int[] nums)"}
{"task_id": 9, "raw_nl": "将 Date 类型转为时间字符串，格式为 format", "signature": "public static String date2String(final Date date, final DateFormat format)"}
{"task_id": 10, "raw_nl": "Looks through the backups directory and assembles a list of all json backup files found. ", "signature": "public static List<String> getBackupFiles(String dir)"}
{"task_id": 11, "raw_nl": "Rearranges the elements of the specified subarray in random order.", "signature": "public static void shuffle(int[] array)"}
{"task_id": 12, "raw_nl": "Retrieves the value by specified int index of the given List.", "signature": "public static String getValue(List<String> list, int index)"}
{"task_id": 13, "raw_nl": "Returns a string, consisting of given length random char from given alphabet. ", "signature": "public static String randomString(int length, String alphabet)"}
{"task_id": 14, "raw_nl": "用1到n随机初始化二维数组", "signature": "public static void init(int[][] arr, int n) "}
{"task_id": 15, "raw_nl": "Copy a file from source path to destination path", "signature": "public static void copyFile(String sourcePath, String destPath)"}
{"task_id": 16, "raw_nl": "Get a hashCode for the real vector. All NaN values have the same hash code.", "signature": "public static int hashCode(double[] vector)"}
{"task_id": 17, "raw_nl": "Parses character set name to Charset object", "signature": "public static Charset charsetForName(String charsetName)"}
{"task_id": 18, "raw_nl": "Reads up to len bytes of data from this input stream into an array of bytes", "signature": "public static byte[] readBytes(java.io.InputStream in, int len)"}
{"task_id": 19, "raw_nl": "Parses query string to Map from an url.", "signature": "public static Map<String, String> parseQueryString(String queryString)"}
{"task_id": 20, "raw_nl": "Returns the value of an array by index, or null if the array has no value at that index.", "signature": "public static Object get(Object[] array, int index)"}
{"task_id": 21, "raw_nl": "Set the additional (undeclared) property with the specified name and value. If the property does not already exist, create it otherwise replace it.", "signature": "public static void putAdditionalProperty(String key, Object value, Map<String, Object> additionalProperties)"}
{"task_id": 22, "raw_nl": "Read the base64 encoded image data from a JPEG image.", "signature": "public static String readImageData(String filename)"}
{"task_id": 23, "raw_nl": "Returns the distance for the two given point", "signature": "public static float distance(float x0, float y0, float x1, float y1)"}
{"task_id": 24, "raw_nl": "Writes a collection of Strings to a File, overwriting any previous file contents. Each String is converted into a line in the File.", "signature": "public static void writeFile(Collection<String> lines, File file)"}
{"task_id": 25, "raw_nl": "Generate a hex string for the specified bytes.", "signature": "public static String toHex(byte[] byteArr)"}
{"task_id": 26, "raw_nl": "获取相应文件filepath的input stream", "signature": "public static java.io.InputStream getInputStream(String filepath)"}
{"task_id": 27, "raw_nl": "获取类上具有指定注解的接口的名称，如果有多个，则以第一个为准 找不到符合条件的接口则返回 clazz 类的名称", "signature": "public static String getInterfaceName(Class<?> clazz, Class<? extends Annotation> annotation)"}
{"task_id": 28, "raw_nl": "Split the given sequence with the given delimiter and return list of values.", "signature": "public static java.util.List<String> split(String sequence, String delimiter)"}
{"task_id": 29, "raw_nl": "This returns the euclidean distance of two vectors sum(i=1,n) (q_i - p_i)^2", "signature": "public static double euclideanDistance(double[] p, double[] q)"}
{"task_id": 30, "raw_nl": "Returns the entry associated with the specified key in map.", "signature": "public static <K,V> Map.Entry<K, V> getEntry(Map<K,V> map, K key)"}
{"task_id": 31, "raw_nl": "Returns the index of the first occurrence of the specified element in this list, returns -1 if the element is not found", "signature": "public int indexOf(int[] array, int element) "}
{"task_id": 32, "raw_nl": "Returns the minimum value in an array.", "signature": "public static int min(int[] array)"}
{"task_id": 33, "raw_nl": "Returns the sum of logarithms, which is Sum( Log(x[i]) ).", "signature": "public double logSum(double[] x)"}
{"task_id": 34, "raw_nl": "Do a simple bubble sort to sort the server ids in ascending order.", "signature": "public static void sortServers(int[] serverIds)"}
{"task_id": 35, "raw_nl": "Ensure that an object reference passed as a parameter to the calling method is not null.", "signature": "public static void ensureNotNull(Object obj)"}
{"task_id": 36, "raw_nl": "Extract the filename from the given path.", "signature": "public static String extractFileName(String path)"}
{"task_id": 37, "raw_nl": "Fill 1D matrix with random numbers.", "signature": "public static void fillMatrix_1D(double[] m)"}
{"task_id": 38, "raw_nl": "Find the occurence of the given key in the given array. Linear search, worst case running time is O(n).", "signature": "public static int linearSearch(int[] arr, int key) "}
{"task_id": 39, "raw_nl": "Generate a not existing temporary file in specified dir.", "signature": "public static String generateTempFile(String dir)"}
{"task_id": 40, "raw_nl": "Get one character of index i from a given string buffer.", "signature": "public static char getChar(StringBuffer sb, int i)"}
{"task_id": 41, "raw_nl": "将map中所有的key转为大写", "signature": "public static Map<String, Object> getAllUpperCase(Map<String, Object> map)"}
{"task_id": 42, "raw_nl": "得到距离当前时间前一年的时间 @Title: getLastYearDate", "signature": "public static String getLastYearDate()"}
{"task_id": 43, "raw_nl": "更新url中的参数(保证参数不重复)", "signature": "public static String updateUrl(String url, String key, String value)"}
{"task_id": 44, "raw_nl": "移除 map 中的 null 或者 空字符串", "signature": "public static void removeNullValue(Map<String, Object> map)"}
{"task_id": 45, "raw_nl": "获取某个时间data的年份", "signature": "public static int getYear(Date date)"}
{"task_id": 46, "raw_nl": "Element-by-element matrix multiplication in place, A = A*B ", "signature": "public void matrixMultiply(double[][] A, double[][] B)"}
{"task_id": 47, "raw_nl": "通过反射获取某个类的对象内所有的 public 成员变量, 包括该类的基类", "signature": "public static List<Field> getFields(Class<?> clazz)"}
{"task_id": 48, "raw_nl": "Adds all of the elements in collection to the Set.", "signature": "public static void addAll(Set<Integer> set, Collection<Integer> collection)"}
{"task_id": 49, "raw_nl": "Helper function to convert a long number into a byte array (least significant byte first).", "signature": "public static byte[] longToBytes(long x)"}
{"task_id": 50, "raw_nl": "将byte数组转化为16进制字符串", "signature": "public static String bytesToHexString(byte[] src)"}
{"task_id": 51, "raw_nl": "Returns a hash code value for this bit array.", "signature": "public static int hashCode(byte[] byteArr)"}
{"task_id": 52, "raw_nl": "Removes the entry with the specified key from this map if present.", "signature": "public static void remove(Map<Integer, String> mapObj, Integer key)"}
{"task_id": 53, "raw_nl": "Convert a primitive input array into its object array version (e.g. from int[] to Integer[]).", "signature": "public static Integer[] toObjectArray(int[] array)"}
{"task_id": 55, "raw_nl": "判断字符串是否只含字母和数字", "signature": "public static boolean isLetterOrDigit(String str)"}
{"task_id": 56, "raw_nl": "判断是否只含字母", "signature": "public static boolean isLetter(char c)"}
{"task_id": 57, "raw_nl": "Join 2 path elements if path separator not present at the end of first path element，else return the first element.", "signature": "public static String joinPath(String path1, String path2)"}
{"task_id": 58, "raw_nl": "Converts an int into an array of byte using the default (little endian, Lsb0) byte and bit ordering.", "signature": "public static byte[] intToByteArray(int value)"}
{"task_id": 60, "raw_nl": "convert byte array to a hex string", "signature": "public String bytesToHex(byte[] bytes)"}
{"task_id": 62, "raw_nl": "Calculates combinatorial number C(n,m). ", "signature": "public static int combinatorial(int n, int m)"}
{"task_id": 63, "raw_nl": "检验用户名是否合法，只能包括a-z,A-Z,0-9和下划线_，不能以下划线结尾 用户名有最小长度和最大长度限制，比如用户名必须是4-20位", "signature": "public static boolean checkUsername(String username)"}
{"task_id": 64, "raw_nl": "得到现在时间", "signature": "public static String getStringToday(String format)"}
{"task_id": 65, "raw_nl": "return the last day of the date's month of specified string value in format: yyyy-MM", "signature": "public static Date getMonthLastDay(String dateString)"}
{"task_id": 66, "raw_nl": "Merges the given two lists to a new list, but eliminating duplicates elements.", "signature": "public static <T> ArrayList<T> merge(ArrayList<T> list1, ArrayList<T> list2)"}
{"task_id": 67, "raw_nl": "Multiplies the vector by the transpose of the given matrix.", "signature": "public static double[] multiplyTranspose(double[] vector, double[][] matrix)"}
{"task_id": 68, "raw_nl": "Removes and returns last element in list, return null if empty.", "signature": "public static String removeLast(ArrayList<String> list)"}
{"task_id": 69, "raw_nl": "Returns the largest value in linked list.", "signature": "public static int getMax(LinkedList<Integer> list)"}
{"task_id": 70, "raw_nl": "Calculate the elapsed time between two times specified in milliseconds.", "signature": "public static long elapsedTime(Calendar start, Calendar end)"}
{"task_id": 71, "raw_nl": "Compute the CRC32 of an array of bytes.", "signature": "public static long crc32(byte[] bytes)"}
{"task_id": 72, "raw_nl": "Create an instance of a clazz using the current thread context ClassLoader.", "signature": "public static <T> T newInstance(Class<T> clazz)"}
{"task_id": 73, "raw_nl": "Delete data from start until end index (end inclusive) of a object List.", "signature": "public static <T> void delete(List<T> list, int start, int end) "}
{"task_id": 75, "raw_nl": "Get the number of days for the given month in the given year.", "signature": "public static int getDaysInMonth(int year, int month)"}
{"task_id": 76, "raw_nl": "得到filepath路径下第一层目录结构中所有的class文件", "signature": "public static List<String> getClassFileNames(String filepath)"}
{"task_id": 78, "raw_nl": "用str2替换字符串str中第一个出现的str1", "signature": "public static String replaceFirst(String str, String str1, String str2) "}
{"task_id": 79, "raw_nl": "Writes certain bytes from the specified byte array starting from an offset to this output stream.", "signature": "public static void write(byte[] b, int off, int len, OutputStream outputStream)"}
{"task_id": 80, "raw_nl": "随机生成[origin, bound)范围之内的一个int值", "signature": "public static int randomInt(int origin, int bound)"}
{"task_id": 81, "raw_nl": "上传一个文件filename至指定路径pathname下", "signature": "public static void uploadFile(String pathname, String filename)"}
{"task_id": 82, "raw_nl": "Debug helper function that returns the diff of two property maps, only displaying the key that is different and in which map it exists compared to the other map,example:map:key1,key2 map2:key1,key2,key3", "signature": "public static String diff(java.util.Map<String, String> map1, java.util.Map<String, String> map2) "}
{"task_id": 83, "raw_nl": "Returns a new, immutable collection containing the names of all entities within the directory denoted by the current path", "signature": "public static List<String> getFiles(String dir)"}
{"task_id": 84, "raw_nl": "Rotate this a two-dimensional point around Y axis with the given angle in radians.", "signature": "public static Point rotateY(double angle, Point point)"}
{"task_id": 85, "raw_nl": "If the string passed in is not blank or null and did not end with the trailing value, then appended the trailing value to it and return the result ", "signature": "public static String appendTrailing(String str, String trailing)"}
{"task_id": 86, "raw_nl": "Returns true if the collection contains an element for the key.", "signature": "public static boolean containsKey(Collection<String> collection, String key)"}
{"task_id": 87, "raw_nl": "Returns true if the given object is an instance of the class or interface specified.", "signature": "public static boolean isInstanceOf(Object object, Class<?> type)"}
{"task_id": 88, "raw_nl": "将16进制字符串转10进制", "signature": "public static int hexStringToInt(String hexString)"}
{"task_id": 89, "raw_nl": "Add two integers, checking for overflow.", "signature": "public static boolean checkOverflow(int x, int y)"}
{"task_id": 90, "raw_nl": "Add the value to the HashSet given by map.get(key), creating a new HashSet if the HashSet is null", "signature": "public static void addToSet(Map<String, HashSet<Integer>> map, String key, Integer value)"}
{"task_id": 91, "raw_nl": "Calculate and return the average of the two values rounded DOWN.", "signature": "public static int average(int a, int b)"}
{"task_id": 92, "raw_nl": "Check if #MIN_VALUE <= value <= #MAX_VALUE and if not an IllegalArgumentException is thrown.", "signature": "public static void checkRange(int value, int min, int max)"}
{"task_id": 93, "raw_nl": "Check whether the String is a valid Java number", "signature": "public static boolean isNumber(String str)"}
{"task_id": 94, "raw_nl": "Choose a pseudo-random element from the specified array.", "signature": "public static int random(int[] array)"}
{"task_id": 95, "raw_nl": "Compare two java objects for equality.", "signature": "public static boolean equals(Object o1, Object o2)"}
{"task_id": 96, "raw_nl": "Compute the product of this matrix and the given column vector.", "signature": "public static double[] product(double[] columnVector,double[][] matrix)"}
{"task_id": 97, "raw_nl": "Concatenate two arrays of T type", "signature": "public static <T> T[] concat(T[] a, T[] b)"}
{"task_id": 98, "raw_nl": "Convert the text '&' mnemonic string to text string. The '&' symbol is treated as the mnemonic pointer. The double \"&&\" symbols are treated as the single '&'. For example the string \"&Look && Feel\" is converted to \"Look & Feel\".", "signature": "public static String convertMnemonicString(String text)"}
{"task_id": 99, "raw_nl": "Convert a boolean value into a string.", "signature": "public static String boolToString(boolean b)"}
{"task_id": 100, "raw_nl": "Convert an arbitrary text encoding to its canonical name.", "signature": "public static String canonicalEncodingName(String encoding)"}
{"task_id": 101, "raw_nl": "Create a copy of the Integer array.", "signature": "public static int[] copy(int[] arr)"}
{"task_id": 102, "raw_nl": "Returns the current number of entries in the map.", "signature": "public static int size(Map<String, String> map)"}
{"task_id": 103, "raw_nl": "Returns true if two doubles are considered equal. Tests if the absolute difference between the two doubles has a difference less then a given double (epsilon)Returns true if two doubles are considered equal. Tests if the absolute difference between the two doubles has a difference less then a given double (epsilon)", "signature": "public static boolean equals(double a, double b, double epsilon)"}
{"task_id": 104, "raw_nl": "Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if necessary.", "signature": "public static void putShort(byte[] data, byte b, short s)"}
{"task_id": 105, "raw_nl": "Advances the iterator either forward or backward the specified number of steps. Negative values move backward, and positive values move forward. This is equivalent to repeatedly calling next() or previous().", "signature": "public static int next(Iterator<Integer> iterator, int n)"}
{"task_id": 106, "raw_nl": "一维数组转为二维数组", "signature": "public static int[][] arrayToMatrix(int[] m, int width, int height)"}
{"task_id": 107, "raw_nl": "Verifies that the given array is not null or empty.", "signature": "public boolean checkNotNullOrEmpty(int[] array)"}
{"task_id": 108, "raw_nl": "Removes all white spaces from a string A whitespace is identified using the Java method Character.isWhiteSpace", "signature": "public static String removeAllWhiteSpaces(String str)"}
{"task_id": 109, "raw_nl": "subtract b from a", "signature": "public static String[] sub(String[] a, String[] b)"}
{"task_id": 110, "raw_nl": "Converts the string argument into a float value.", "signature": "public static float parseFloat(String floatStr)"}
{"task_id": 111, "raw_nl": "Return true if the local path is a Windows absolute path.", "signature": "public static boolean isWindowsAbsolutePath(String path)"}
{"task_id": 112, "raw_nl": "Calculates the distance between two points in high-dimensional space.", "signature": "public static double length(double[] p0, double[] p1)"}
{"task_id": 113, "raw_nl": "This function takes an array of words, and returns a string with all the words in the separated by a space.", "signature": "public static String getStringfromStringArray(String[] array)"}
{"task_id": 114, "raw_nl": "Check whether a file is actually a valid zip", "signature": "public static boolean isValidZip(File zip)"}
{"task_id": 115, "raw_nl": "Parse a list of longs into strings.", "signature": "public static String[] toTimestampStrs(long[] timestamps)"}
{"task_id": 116, "raw_nl": "Change the size of this array. Content between indexes 0 and min(size(), newSize) will be preserved.", "signature": "public static int[] resize(int[] arr,long newSize)"}
{"task_id": 117, "raw_nl": "概述：截取指定长度的数组", "signature": "public static byte[] subBytes(byte[] src, int pos, int count)"}
{"task_id": 118, "raw_nl": "返回不小于输入值value的最小整数", "signature": "public static int floor(double val)"}
{"task_id": 119, "raw_nl": "保留两位小数", "signature": "public static String formatDouble(double val)"}
{"task_id": 120, "raw_nl": "Compares the two specified double values,return 1 if the first value is greater than the second value,-1 if the first value is less than the second value,0 if the two values are equal. There are two special cases: Double.NaN is equal to Double.NaN and it is greater than any other double value, including Double.POSITIVE_INFINITY; +0.0d is greater than -0.0d", "signature": "public static int compare(double double1, double double2)"}
{"task_id": 121, "raw_nl": "Get the index of the next slash.", "signature": "public static int getNextSlash(String path, int index)"}
{"task_id": 122, "raw_nl": "Returns true if all entries of (all subarrays of) the input array are >= 0. Returns true if the array is non-null, but empty", "signature": "public static boolean isNonNegative(long[][] in)"}
{"task_id": 123, "raw_nl": "Returns maximum possible integer, less or equal than oldValue, divisible by quantum.", "signature": "public static int floor(int x, int quantum)"}
{"task_id": 124, "raw_nl": "Appends an item to the list.", "signature": "public void append(List<String> list, String item)"}
{"task_id": 125, "raw_nl": "判断某个日期属于本月的第几天", "signature": "public static int getDaysByMonth(String dateTime)"}
{"task_id": 126, "raw_nl": "Unzip the contents of the given zip in the given directory (create it if it doesn't exist)", "signature": "public static void unzip(String zipPath, String destDirPath)"}
{"task_id": 127, "raw_nl": "returns a array including given range. [start, end)", "signature": "public static int[] range(int start, int end)"}
{"task_id": 128, "raw_nl": "Clear the given calendar, setting to zero all time values less than or equal to that of the given field. For example, clearing to Calendar#HOUR will floor the time to nearest hour which occurred before or at the given time (e.g., 1:32 --> 1:30).", "signature": "public static Calendar clearTo(Calendar c, int field)"}
{"task_id": 129, "raw_nl": "获取当前系统时间 minute分钟后 的时间", "signature": "public static String getNowDate(int minute)"}
{"task_id": 130, "raw_nl": "Check the given value is in int range.", "signature": "public static boolean isDecimalWithinIntRange(BigDecimal decimalValue)"}
{"task_id": 131, "raw_nl": "Produces a new double array containing the elements between the start and end indices. The start index is inclusive, the end index exclusive. Null array input produces null output.", "signature": "public static double[] subarray(final double[] array, int startIndexInclusive, int endIndexExclusive)"}
{"task_id": 132, "raw_nl": "将微博时间字符串转换成yyyyMMddHHmmSS 微博时间字符串有： xx分钟前 今天 11:53 07月09日 13:36 2010-09-23 19:55:38", "signature": "public static String parseDate(String weiboTimeStr)"}
{"task_id": 133, "raw_nl": "返回当月开始时间", "signature": "public static long currentMonthStartUnixTime()"}
{"task_id": 134, "raw_nl": "Multiply Long and Double numbers.", "signature": "public static Long multiply(Long number, Double multiplier)"}
{"task_id": 135, "raw_nl": "Multiply two Short numbers.", "signature": "public static Short multiply(Short a, Short b)"}
{"task_id": 136, "raw_nl": "Attempt to find a field on the supplied Class with the supplied name and/or type. Searches all superclasses up to Object.", "signature": "public static Field findField(Class clazz, String name, Class type)"}
{"task_id": 137, "raw_nl": "获取request的IP地址", "signature": "public static String getIPAddr(HttpRequest request)"}
{"task_id": 138, "raw_nl": "Convert byte array to binary String", "signature": "public static String toBinary(byte[] pBytes) "}
{"task_id": 139, "raw_nl": "Convert arguments of a method (signature) to an array of Type objects.", "signature": "public static Type[] getArgumentTypes(String signature)"}
{"task_id": 140, "raw_nl": "Convert a partial buffer to a String.", "signature": "public static String toString(ByteBuffer buffer, int position, int length, Charset charset)"}
{"task_id": 141, "raw_nl": "两个时间之间相差距离多少天,时间格式yyyy-MM-dd", "signature": "public static long getDistanceDays(String str1, String str2)"}
{"task_id": 142, "raw_nl": "获取url的顶级域名", "signature": "public static String getTopDomain(String url)"}
{"task_id": 143, "raw_nl": "Returns true if the given String matches to one of the provided Patterns, false otherwise.", "signature": "public static boolean matchesPattern(String _string, Pattern[] _patterns)"}
{"task_id": 144, "raw_nl": "Extracts all the files in the given zip file to the input destination path. If zip file does not exist or destination path is invalid then an exception is thrown.", "signature": "public static void extractAll(String destPath, String zipName)"}
{"task_id": 145, "raw_nl": "判断两个数组的内容是否相等 用于equals的比较", "signature": "public static boolean equals(Object[] array, Object[] other)"}
{"task_id": 146, "raw_nl": "Returns a set with all unique methodNames of methods.", "signature": "public static Set<String> getMethods(ClassLoader classLoader, String className)"}
{"task_id": 147, "raw_nl": "Returns the pid of the task", "signature": "public static String getPid(FutureTask t)"}
{"task_id": 148, "raw_nl": "Swaps the elements at the specified positions in the specified list. (If the specified positions are equal, invoking this method leaves the list unchanged.)", "signature": "public static <E> void swap(List<E> list, int i, int j)"}
{"task_id": 149, "raw_nl": "Get the radian between current line(determined by point A and B) and horizontal line.", "signature": "public float getRadian(Point A, Point B)"}
{"task_id": 151, "raw_nl": "Converts from an int array to an Integer array.", "signature": "public static Integer[] asObjectArray(int[] array)"}
{"task_id": 152, "raw_nl": "生成32位的MD5码", "signature": "public static String toMd5Code(String str)"}
{"task_id": 153, "raw_nl": "计算 C2 = M xor t", "signature": "public static byte[] calculateC2(byte[] m, byte[] t)"}
{"task_id": 154, "raw_nl": "获取资源文件的url", "signature": "public static URL getUrlFile(String fileName)"}
{"task_id": 156, "raw_nl": "Adds a given vector (array) to another one. * Every element of the second array (missing element is treated to be zero) is added to the corresponding element (if not missing) of the first array.", "signature": "public static void addTo(float[] arrayA, float[] arrayB)"}
{"task_id": 157, "raw_nl": "Searches backward for value in a given array", "signature": "public static int lastIndexOf(float value, float[] array)"}
{"task_id": 160, "raw_nl": "随机抽取指定数量的用户，作为中奖用户", "signature": "public List<String> doDrawRandom(List<String> users, int count)"}
{"task_id": 161, "raw_nl": "Returns the geometric center of this sequence of points", "signature": "public static Point getCenter(List<Point> points)"}
{"task_id": 162, "raw_nl": "括号匹配检测.", "signature": "public boolean checkbracket(String str)"}
{"task_id": 163, "raw_nl": "Move a file or directory from source to destination, recursively copying subdirectories.", "signature": "public static void move(Path src, Path dest)"}
{"task_id": 164, "raw_nl": "Reverse a Map into a ValueSetMap, where each original value is mapped to the set of all its original keys.", "signature": "public static <K, V> Map<V, Set<K> > reverseMapIntoValueSetMap(Map<K, V> map)"}
{"task_id": 165, "raw_nl": "Decode base64 string to bytes", "signature": "public static byte[] base64decode(String base64string)"}
{"task_id": 166, "raw_nl": "通过反射为对象的对应字段注入值", "signature": "public static <T> T initByReflect(String name, String value, T t)"}
{"task_id": 167, "raw_nl": "将数组转为 List", "signature": "public static <T> List<T> array2List(T[] array)"}
{"task_id": 168, "raw_nl": "获取过去7天的时期(包括今天)，格式为yymmdd", "signature": "public static List<String> getWeekDate()"}
{"task_id": 169, "raw_nl": "Returns the total number of bytes remaining in the buffer array.", "signature": "public static long remaining(ByteBuffer[] buffers)"}
{"task_id": 170, "raw_nl": "返回y年m月d日对应的农历.返回格式为某年某月某日 ?", "signature": "public static String getLunarDate(int year, int month, int day)"}
{"task_id": 171, "raw_nl": "去掉浮点数多余的0", "signature": "public static String rvZeroAndDot(String s)"}
{"task_id": 172, "raw_nl": "十进制整型数值减法，字符串表示每一个数", "signature": "public static String bigDecimalSubtract(String str, String str1)"}
{"task_id": 173, "raw_nl": "Get the extension of a file. Return a null string if there is no extension.", "signature": "public static String getFileExtension(File file)"}
{"task_id": 174, "raw_nl": "判定一个字符串是不是整数", "signature": "public static boolean isInteger(String numberString)"}
{"task_id": 176, "raw_nl": "Returns true if the bit at the given position is 1 and false otherwise.", "signature": "public static boolean getBinaryState(int targetInteger, int position)"}
{"task_id": 177, "raw_nl": "获取当前进程的ID", "signature": "public static String getProcessId()"}
{"task_id": 178, "raw_nl": "Handles comparison between version numbers (the right way(TM))，bigger return 1 ，smaller return -1 and equals return 0. Examples of version strings: 1.6.7, 1.2_b10", "signature": "public static int versionCompare(String v1, String v2)"}
{"task_id": 179, "raw_nl": "在map中，如果key存在,则value相加；如果key 不存在，增加新的key，value", "signature": "public static Long incrBy(Map<String,Long> valMap,String key, Long integer)"}
{"task_id": 180, "raw_nl": "Check if a string is binary, which is composed of 0/1, and string length is multiple of 8.", "signature": "public static boolean isBin(String bin)"}
{"task_id": 181, "raw_nl": "通过反射, 获得Class定义中声明的泛型参数的类型. 如无法找到, 返回Object.class.", "signature": "public static List<Class> getClassGenricType(Class clazz)"}
{"task_id": 182, "raw_nl": "滤掉词串中的空格、标点符号", "signature": "public static String[] filter(String[] word_list)"}
{"task_id": 183, "raw_nl": "BigDecimal加法运算", "signature": "public static BigDecimal add(BigDecimal aVal, BigDecimal bVal)"}
{"task_id": 186, "raw_nl": "Returns whether or no the JDK version is 1.7u40 and above.", "signature": "public static boolean isJdk7u40Above()"}
