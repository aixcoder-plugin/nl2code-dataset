{"task_id": 0, "raw_nl": "Take a collection of Strings and return a combined string as a comma separated list with 'and' between the final pair. For example: [a, b, c] to \"a, b and c\".", "signature": "public String collectionToCommaDelimitedString(List<String> coll)", "code": "{ \nStringBuilder sb = new StringBuilder ( ) ; \nfor ( Iterator < String > it = coll . iterator ( ) ; it . hasNext ( ) ; ) { \nsb . append ( it . next ( ) ) ; \nif ( it . hasNext ( ) ) { \nsb . append ( \", \" ) ; \n} \n} \nreturn sb . toString ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 1, "raw_nl": "Creates a padding string of a certain length", "signature": "public String createPadding(int length, char padChar)", "code": "{ \nStringBuffer sb = new StringBuffer ( ) ; \nfor ( int i = 0 ; i < length ; i ++ ) { \nsb . append ( padChar ) ; \n} \nreturn sb . toString ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 2, "raw_nl": "Create and returns a HttpURLConnection connection to a webpage", "signature": "public HttpURLConnection createHttpConnection(URL url, int connectTimeout, Map<String, String> requestProperties)", "code": "throws IOException { \nHttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; \nconnection . setConnectTimeout ( connectTimeout ) ; \nconnection . setReadTimeout ( connectTimeout ) ; \nconnection . setRequestMethod ( \"POST\" ) ; \nconnection . setRequestProperty ( \"Content-Type\" , \"application/x-www-form-urlencoded\" ) ; \nconnection . setRequestProperty ( \"Content-Length\" , \"0\" ) ; \nif ( requestProperties != null ) { \nfor ( Map . Entry < String , String > entry : requestProperties . entrySet ( ) ) { \nconnection . setRequestProperty ( entry . getKey ( ) , entry . getValue ( ) ) ; \n} \n} \nreturn connection ; \n} ", "end_by": "end_token"}
{"task_id": 3, "raw_nl": "Write content to the file. If file does not exist, it will create one.", "signature": "public void writeToFile(String content, String fileName)", "code": "throws IOException { \ntry ( FileWriter fw = new FileWriter ( fileName ) ; \nBufferedWriter bw = new BufferedWriter ( fw ) ) { \nbw . write ( content ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 4, "raw_nl": "Close Reader. If object is null it is ignored", "signature": "public void close(Reader reader)", "code": "{ \nif ( reader != null ) { \ntry { \nreader . close ( ) ; \n} catch ( IOException e ) { \n} \n} \n} ", "end_by": "end_token"}
{"task_id": 5, "raw_nl": "max() that works on three integers. Like many of the other max() functions in this class", "signature": "public float max(float a, float b, float c) ", "code": "{ \nfloat max = Math . max ( a , b ) ; \nmax = Math . max ( max , c ) ; \nreturn max ; \n} ", "end_by": "end_token"}
{"task_id": 6, "raw_nl": "put a short value into a byte array with specific offset", "signature": "public void putShort(byte[] data, short value, int offset)", "code": "{ \ndata [ offset ] = ( byte ) ( ( value >>> 0 ) & 0xFF ) ; \ndata [ offset + 1 ] = ( byte ) ( ( value >>> 8 ) & 0xFF ) ; \n} ", "end_by": "end_token"}
{"task_id": 7, "raw_nl": "\u4ece http \u670d\u52a1\u62c9\u53d6\u914d\u7f6e\u6587\u4ef6\u5e76\u89e3\u6790\u4e3aProperties \u5bf9\u8c61", "signature": "public Properties getProperties(String url)", "code": "{ \nProperties properties = new Properties ( ) ; \ntry { \nInputStream in = HttpUtil . getStream ( url ) ; \nif ( in == null ) { \nreturn null ; \n} \nproperties . load ( in ) ; \nin . close ( ) ; \n} catch ( Exception e ) { \nlogger . error ( \"[getProperties] load properties from http server error.url:{}\" , url , e ) ; \n} \nreturn properties ; \n} ", "end_by": "end_token"}
{"task_id": 8, "raw_nl": "\u7ed9\u4e00\u4e2a\u6570\u7ec4\uff0c\u627e\u51fa\u6700\u5927\u503c\u5e76\u4e14\u8fd4\u56de\u3002", "signature": "public int findMaxNumber(int[] nums)", "code": "{ \nif ( nums == null || nums . length == 0 ) { \nreturn 0 ; \n} \nint maxNumber = nums [ 0 ] ; \nfor ( int i = 1 ; i < nums . length ; i ++ ) { \nif ( nums [ i ] > maxNumber ) { \nmaxNumber = nums [ i ] ; \n} \n} \nreturn maxNumber ; \n} ", "end_by": "end_token"}
{"task_id": 9, "raw_nl": "\u5c06 Date \u7c7b\u578b\u8f6c\u4e3a\u65f6\u95f4\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a format", "signature": "public String date2String(final Date date, final DateFormat format)", "code": "{ \nif ( format != null ) { \nreturn format . format ( date ) ; \n} else { \nreturn EMPTY ; \n} \n} ", "end_by": "end_token"}
{"task_id": 10, "raw_nl": "Looks through the backups directory and assembles a list of all json backup files found. ", "signature": "public List<String> getBackupFiles(String dir)", "code": "{ \nList < String > list = new ArrayList < String > ( ) ; \nFile [ ] files = new File ( dir ) . listFiles ( ) ; \nif ( files != null ) { \nfor ( File file : files ) { \nif ( file . getName ( ) . endsWith ( \".json\" ) ) { \nlist . add ( file . getName ( ) ) ; \n} \n} \n} \nreturn list ; \n} ", "end_by": "end_token"}
{"task_id": 11, "raw_nl": "Rearranges the elements of the specified subarray in random order.", "signature": "public void shuffle(int[] array)", "code": "{ \nif ( array == null ) \nthrow new NullPointerException ( \"argument array is null\" ) ; \nint n = array . length ; \nfor ( int i = 0 ; i < n ; i ++ ) { \n// between i and n-1\nint r = i + uniform ( n - i ) ; \nint temp = array [ i ] ; \narray [ i ] = array [ r ] ; \narray [ r ] = temp ; \n} \n} ", "end_by": "end_token"}
{"task_id": 12, "raw_nl": "Retrieves the value by specified int index of the given List.", "signature": "public String getValue(List<String> list, int index)", "code": "{ \nif ( list == null || index < 0 || index >= list . size ( ) ) { \nreturn null ; \n} \nreturn list . get ( index ) ; \n} ", "end_by": "end_token"}
{"task_id": 13, "raw_nl": "Returns a string, consisting of given length random char from given alphabet. ", "signature": "public String randomString(int length, String alphabet)", "code": "{ \nif ( alphabet == null ) { \nreturn null ; \n} \nStringBuilder sb = new StringBuilder ( length ) ; \nfor ( int i = 0 ; i < length ; i ++ ) { \nsb . append ( alphabet . charAt ( nextInt ( alphabet . length ( ) ) ) ) ; \n} \nreturn sb . toString ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 14, "raw_nl": "\u75281\u5230n\u968f\u673a\u521d\u59cb\u5316\u4e8c\u7ef4\u6570\u7ec4", "signature": "public void init(int[][] arr, int n) ", "code": "{ \nfor ( int i = 0 ; i < n ; i ++ ) { \nfor ( int j = 0 ; j < n ; j ++ ) { \narr [ i ] [ j ] = ( int ) ( Math . random ( ) * 10 ) ; \n} \n} \n} ", "end_by": "end_token"}
{"task_id": 15, "raw_nl": "Copy a file from source path to destination path", "signature": "public void copyFile(String sourcePath, String destPath)", "code": "throws IOException { \nif ( sourcePath == null || destPath == null ) { \nthrow new NullPointerException ( \"Null path\" ) ; \n} \nif ( ! new File ( sourcePath ) . exists ( ) ) { \nthrow new IllegalArgumentException ( \"File does not exist: \" + sourcePath ) ; \n} \nif ( ! new File ( destPath ) . exists ( ) ) { \nthrow new IllegalArgumentException ( \"File does not exist: \" + destPath ) ; \n} \nif ( ! new File ( destPath ) . getParentFile ( ) . exists ( ) ) { \nthrow new IllegalArgumentException ( \"Parent folder does not exist: \" + destPath ) ; \n} \nif ( ! new File ( destPath ) . getParentFile ( ) . canWrite ( ) ) { \nthrow new IllegalArgumentException ( \"Parent folder is not writable: \" + destPath ) ; \n} \nif ( ! new File ( destPath ) . canWrite ( ) ) { \nthrow new IllegalArgumentException ( \"File is not writable: \" + destPath ) ; \n} \ntry ( FileInputStream fis = new FileInputStream ( sourcePath ) ; \nFileOutputStream fos = new FileOutputStream ( destPath ) ) { \nbyte [ ] buf = new byte [ 1024 ] ; \nint i ; \nwhile ( ( i = fis . read ( buf ) ) != -1 ) { \nfos . write ( buf , 0 , i ) ; \n} \n} \n} ", "end_by": "end_token"}
{"task_id": 16, "raw_nl": "Get a hashCode for the real vector. All NaN values have the same hash code.", "signature": "public int hashCode(double[] vector)", "code": "{ \nif ( vector == null ) { \nreturn 0 ; \n} \nint h = 1 ; \nfor ( double element : vector ) { \nint x = Double . doubleToRawLongBits ( element ) ; \nh = 31 * h + x ; \n} \nreturn h ; \n} ", "end_by": "end_token"}
{"task_id": 17, "raw_nl": "Parses character set name to Charset object", "signature": "public Charset charsetForName(String charsetName)", "code": "{ \nif ( charsetName == null ) { \nreturn null ; \n} \ntry { \nreturn Charset . forName ( charsetName ) ; \n} catch ( IllegalCharsetNameException icne ) { \nthrow new IllegalArgumentException ( \"Unsupported charset \" + charsetName , icne ) ; \n} catch ( UnsupportedCharsetException uce ) { \nthrow new IllegalArgumentException ( \"Unsupported charset \" + charsetName , uce ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 18, "raw_nl": "Reads up to len bytes of data from this input stream into an array of bytes", "signature": "public byte[] readBytes(java.io.InputStream in, int len)", "code": "throws java . io . IOException { \nbyte [ ] buf = new byte [ len ] ; \nint count = 0 ; \nwhile ( count < len ) { \nint numRead = in . read ( buf , count , len - count ) ; \nif ( numRead < 0 ) { \nthrow new java . io . EOFException ( ) ; \n} \ncount += numRead ; \n} \nreturn buf ; \n} ", "end_by": "end_token"}
{"task_id": 19, "raw_nl": "Parses query string to Map from an url.", "signature": "public Map<String, String> parseQueryString(String queryString)", "code": "{ \nMap < String , String > map = new HashMap < > ( ) ; \nif ( queryString != null ) { \nString [ ] parameters = queryString . split ( \"&\" ) ; \nfor ( String parameter : parameters ) { \nString [ ] keyValue = parameter . split ( \"=\" ) ; \nmap . put ( keyValue [ 0 ] , keyValue . length == 2 ? keyValue [ 1 ] : null ) ; \n} \n} \nreturn map ; \n} ", "end_by": "end_token"}
{"task_id": 20, "raw_nl": "Returns the value of an array by index, or null if the array has no value at that index.", "signature": "public Object get(Object[] array, int index)", "code": "{ \nif ( array == null ) { \nreturn null ; \n} \nif ( index < 0 ) { \nreturn null ; \n} \nif ( index >= array . length ) { \nreturn null ; \n} \nreturn array [ index ] ; \n} ", "end_by": "end_token"}
{"task_id": 21, "raw_nl": "Set the additional (undeclared) property with the specified name and value. If the property does not already exist, create it otherwise replace it.", "signature": "public void putAdditionalProperty(String key, Object value, Map<String, Object> additionalProperties)", "code": "{ \nif ( additionalProperties == null ) { \nadditionalProperties = new HashMap < String , Object > ( ) ; \n} \nadditionalProperties . put ( key , value ) ; \n} ", "end_by": "end_token"}
{"task_id": 22, "raw_nl": "Read the base64 encoded image data from a JPEG image.", "signature": "public String readImageData(String filename)", "code": "throws IOException { \nFileInputStream fis = new FileInputStream ( filename ) ; \nbyte [ ] data = new byte [ fis . available ( ) ] ; \nfis . read ( data ) ; \nfis . close ( ) ; \nreturn Base64 . encode ( data ) ; \n} ", "end_by": "end_token"}
{"task_id": 23, "raw_nl": "Returns the distance for the two given point", "signature": "public float distance(float x0, float y0, float x1, float y1)", "code": "{ \nfloat dx = x1 - x0 ; \nfloat dy = y1 - y0 ; \nreturn ( float ) Math . sqrt ( dx * dx + dy * dy ) ; \n} ", "end_by": "end_token"}
{"task_id": 24, "raw_nl": "Writes a collection of Strings to a File, overwriting any previous file contents. Each String is converted into a line in the File.", "signature": "public void writeFile(Collection<String> lines, File file)", "code": "throws IOException { \nif ( file == null ) { \nthrow new IOException ( \"File is null\" ) ; \n} \nif ( ! file . exists ( ) ) { \nfile . createNewFile ( ) ; \n} \nFileOutputStream fos = new FileOutputStream ( file ) ; \nBufferedOutputStream bos = new BufferedOutputStream ( fos ) ; \nPrintWriter writer = new PrintWriter ( bos ) ; \nfor ( String line : lines ) { \nwriter . println ( line ) ; \n} \nwriter . close ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 25, "raw_nl": "Generate a hex string for the specified bytes.", "signature": "public final String toHex(byte[] byteArr)", "code": "{ \nif ( byteArr == null ) \nreturn \"\" ; \nreturn toHex ( byteArr , byteArr . length ) ; \n} ", "end_by": "end_token"}
{"task_id": 26, "raw_nl": "\u83b7\u53d6\u76f8\u5e94\u6587\u4ef6filepath\u7684input stream", "signature": "public java.io.InputStream getInputStream(String filepath)", "code": "{ \njava . io . InputStream is = null ; \ntry { \nis = new FileInputStream ( filepath ) ; \n} catch ( FileNotFoundException e ) { \ne . printStackTrace ( ) ; \n} \nreturn is ; \n} ", "end_by": "end_token"}
{"task_id": 27, "raw_nl": "\u83b7\u53d6\u7c7b\u4e0a\u5177\u6709\u6307\u5b9a\u6ce8\u89e3\u7684\u63a5\u53e3\u7684\u540d\u79f0\uff0c\u5982\u679c\u6709\u591a\u4e2a\uff0c\u5219\u4ee5\u7b2c\u4e00\u4e2a\u4e3a\u51c6 \u627e\u4e0d\u5230\u7b26\u5408\u6761\u4ef6\u7684\u63a5\u53e3\u5219\u8fd4\u56de clazz \u7c7b\u7684\u540d\u79f0", "signature": "public String getInterfaceName(Class<?> clazz, Class<? extends Annotation> annotation)", "code": "{ \nif ( clazz == null ) { \nreturn null ; \n} \nString interfaceName = null ; \nClass < ? > [ ] interfaces = clazz . getInterfaces ( ) ; \nif ( interfaces == null || interfaces . length == 0 ) { \nreturn interfaceName ; \n} \nfor ( Class < ? > itfc : interfaces ) { \nif ( itfc . isAnnotationPresent ( annotation ) ) { \ninterfaceName = itfc . getName ( ) ; \n} \n} \nif ( interfaceName == null || interfaceName . length ( ) == 0 ) { \nreturn interfaceName ; \n} \nreturn interfaceName ; \n} ", "end_by": "end_token"}
{"task_id": 28, "raw_nl": "Split the given sequence with the given delimiter and return list of values.", "signature": "public java.util.List<String> split(String sequence, String delimiter)", "code": "{ \njava . util . List < String > result = new ArrayList < String > ( ) ; \nint start = 0 ; \nint index = 0 ; \nwhile ( ( index = sequence . indexOf ( delimiter , start ) ) != -1 ) { \nresult . add ( sequence . substring ( start , index ) ) ; \nstart = index + delimiter . length ( ) ; \n} \nresult . add ( sequence . substring ( start ) ) ; \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 29, "raw_nl": "This returns the euclidean distance of two vectors sum(i=1,n) (q_i - p_i)^2", "signature": "public double euclideanDistance(double[] p, double[] q)", "code": "{ \ndouble distance = 0 ; \nfor ( int i = 0 ; i < p . length ; i ++ ) { \ndistance += ( p [ i ] - q [ i ] ) * ( p [ i ] - q [ i ] ) ; \n} \nreturn Math . sqrt ( distance ) ; \n} ", "end_by": "end_token"}
{"task_id": 30, "raw_nl": "Returns the entry associated with the specified key in map.", "signature": "public <K,V> Map.Entry<K, V> getEntry(Map<K,V> map, K key)", "code": "{ \nif ( map instanceof WeakHashMap ) { \nreturn ( ( WeakHashMap < K , V > ) map ) . getEntry ( key ) ; \n} \nIterator < Map . Entry < K , V > > it = map . entrySet ( ) . iterator ( ) ; \nwhile ( it . hasNext ( ) ) { \nMap . Entry < K , V > e = it . next ( ) ; \nif ( key . equals ( e . getKey ( ) ) ) { \nreturn e ; \n} \n} \nreturn null ; \n} ", "end_by": "end_token"}
{"task_id": 31, "raw_nl": "Returns the index of the first occurrence of the specified element in this list, returns -1 if the element is not found", "signature": "public int indexOf(int[] array, int element) ", "code": "{ \nfor ( int i = 0 ; i < array . length ; i ++ ) { \nif ( array [ i ] == element ) { \nreturn i ; \n} \n} \nreturn -1 ; \n} ", "end_by": "end_token"}
{"task_id": 32, "raw_nl": "Returns the minimum value in an array.", "signature": "public int min(int[] array)", "code": "{ \n// Validates input\nif ( array == null ) { \nthrow new IllegalArgumentException ( \"The Array must not be null\" ) ; \n} else if ( array . length == 0 ) { \nthrow new IllegalArgumentException ( \"Array cannot be empty.\" ) ; \n} \n// Finds and returns min\nint min = array [ 0 ] ; \nfor ( int j = 1 ; j < array . length ; j ++ ) { \nif ( array [ j ] < min ) { \nmin = array [ j ] ; \n} \n} \nreturn min ; \n} ", "end_by": "end_token"}
{"task_id": 33, "raw_nl": "Returns the sum of logarithms, which is Sum( Log(x[i]) ).", "signature": "public double logSum(double[] x)", "code": "{ \ndouble max = Double . NEGATIVE_INFINITY ; \ndouble sum = 0.0 ; \nfor ( int i = 0 ; i < x . length ; i ++ ) { \nif ( max < x [ i ] ) { \nmax = x [ i ] ; \n} \nsum += Math . log ( x [ i ] ) ; \n} \nreturn max + Math . log ( sum ) ; \n} ", "end_by": "end_token"}
{"task_id": 34, "raw_nl": "Do a simple bubble sort to sort the server ids in ascending order.", "signature": "public void sortServers(int[] serverIds)", "code": "{ \nint size = serverIds . length ; \nint lowest ; \nfor ( int i = 0 ; i < size ; i ++ ) { \nlowest = i ; \nfor ( int j = i + 1 ; j < size ; j ++ ) { \nif ( serverIds [ j ] < serverIds [ lowest ] ) \nlowest = j ; \n} \nif ( lowest != i ) { \nint temp = serverIds [ i ] ; \nserverIds [ i ] = serverIds [ lowest ] ; \nserverIds [ lowest ] = temp ; \n} \n} \n} ", "end_by": "end_token"}
{"task_id": 35, "raw_nl": "Ensure that an object reference passed as a parameter to the calling method is not null.", "signature": "public void ensureNotNull(Object obj)", "code": "{ \nif ( obj == null ) { \nthrow new IllegalArgumentException ( \"Object must not be null\" ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 36, "raw_nl": "Extract the filename from the given path.", "signature": "public String extractFileName(String path)", "code": "{ \nint lastSlashIndex = path . lastIndexOf ( '/' ) ; \nif ( lastSlashIndex == -1 ) { \nlastSlashIndex = path . lastIndexOf ( '\\\\' ) ; \n} \nreturn ( lastSlashIndex != -1 ? path . substring ( lastSlashIndex + 1 ) : path ) ; \n} ", "end_by": "end_token"}
{"task_id": 37, "raw_nl": "Fill 1D matrix with random numbers.", "signature": "public void fillMatrix_1D(double[] m)", "code": "{ \nRandom r = new Random ( 2 ) ; \nfor ( int i = 0 ; i < m . length ; i ++ ) { \nm [ i ] = r . nextDouble ( ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 38, "raw_nl": "Find the occurence of the given key in the given array. Linear search, worst case running time is O(n).", "signature": "public int linearSearch(int[] arr, int key) ", "code": "{ \nfor ( int i = 0 ; i < arr . length ; i ++ ) { \nif ( key == arr [ i ] ) { \nreturn i ; \n} \n} \nreturn -1 ; \n} ", "end_by": "end_token"}
{"task_id": 39, "raw_nl": "Generate a not existing temporary file in specified dir.", "signature": "public String generateTempFile(String dir)", "code": "{ \ntry { \nFile tempFile = File . createTempFile ( \"tempFileGenerator\" , \".tmp\" ) ; \ntempFile . deleteOnExit ( ) ; \nreturn tempFile . getAbsolutePath ( ) ; \n} catch ( IOException e ) { \nthrow new RuntimeException ( e ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 40, "raw_nl": "Get one character of index i from a given string buffer.", "signature": "public char getChar(StringBuffer sb, int i)", "code": "{ \nif ( i < sb . length ( ) ) { \nreturn sb . charAt ( i ) ; \n} else { \nreturn ' ' ; \n} \n} ", "end_by": "end_token"}
{"task_id": 41, "raw_nl": "\u5c06map\u4e2d\u6240\u6709\u7684key\u8f6c\u4e3a\u5927\u5199", "signature": "public Map<String, Object> getAllUpperCase(Map<String, Object> map)", "code": "{ \nif ( map == null ) { \nreturn null ; \n} \nMap < String , Object > tempMap = new HashMap < > ( ) ; \nfor ( Map . Entry < String , Object > entry : map . entrySet ( ) ) { \nString key = entry . getKey ( ) . toUpperCase ( ) ; \ntempMap . put ( key , entry . getValue ( ) ) ; \n} \nreturn tempMap ; \n} ", "end_by": "end_token"}
{"task_id": 42, "raw_nl": "\u5f97\u5230\u8ddd\u79bb\u5f53\u524d\u65f6\u95f4\u524d\u4e00\u5e74\u7684\u65f6\u95f4 @Title: getLastYearDate", "signature": "public String getLastYearDate()", "code": "{ \nDate date = new Date ( ) ; \n// \u53ef\u4ee5\u65b9\u4fbf\u5730\u4fee\u6539\u65e5\u671f\u683c\u5f0f\nSimpleDateFormat dateFormat = new SimpleDateFormat ( \"yyyy\" ) ; \nString years = dateFormat . format ( date ) ; \nreturn years ; \n} ", "end_by": "end_token"}
{"task_id": 43, "raw_nl": "\u66f4\u65b0url\u4e2d\u7684\u53c2\u6570(\u4fdd\u8bc1\u53c2\u6570\u4e0d\u91cd\u590d)", "signature": "public String updateUrl(String url, String key, String value)", "code": "{ \nMap < String , String > map = new HashMap < > ( ) ; \nmap . put ( key , value ) ; \nreturn updateUrlParams ( url , map ) ; \n} ", "end_by": "end_token"}
{"task_id": 44, "raw_nl": "\u79fb\u9664 map \u4e2d\u7684 null \u6216\u8005 \u7a7a\u5b57\u7b26\u4e32", "signature": "public void removeNullValue(Map<String, Object> map)", "code": "{ \nSet < String > keySet = map . keySet ( ) ; \nfor ( String key : keySet ) { \nObject obj = map . get ( key ) ; \nif ( obj == null || \"\" . equals ( obj . toString ( ) . trim ( ) ) ) { \nmap . remove ( key ) ; \n} \n} \n} ", "end_by": "end_token"}
{"task_id": 45, "raw_nl": "\u83b7\u53d6\u67d0\u4e2a\u65f6\u95f4data\u7684\u5e74\u4efd", "signature": "public int getYear(Date date)", "code": "{ \nCalendar calendar = Calendar . getInstance ( ) ; \ncalendar . setTime ( date ) ; \nreturn calendar . get ( Calendar . YEAR ) ; \n} ", "end_by": "end_token"}
{"task_id": 46, "raw_nl": "Element-by-element matrix multiplication in place, A = A*B ", "signature": "public void matrixMultiply(double[][] A, double[][] B)", "code": "{ \nif ( A [ 0 ] . length != B . length ) { \nthrow new RuntimeException ( \"Illegal matrix dimensions.\" ) ; \n} \nif ( A . length != B [ 0 ] . length ) { \nthrow new RuntimeException ( \"Illegal matrix dimensions.\" ) ; \n} \nfor ( int i = 0 ; i < A . length ; i ++ ) { \nfor ( int j = 0 ; j < A [ 0 ] . length ; j ++ ) { \nA [ i ] [ j ] *= B [ i ] [ j ] ; \n} \n} \n} ", "end_by": "end_token"}
{"task_id": 47, "raw_nl": "\u901a\u8fc7\u53cd\u5c04\u83b7\u53d6\u67d0\u4e2a\u7c7b\u7684\u5bf9\u8c61\u5185\u6240\u6709\u7684 public \u6210\u5458\u53d8\u91cf, \u5305\u62ec\u8be5\u7c7b\u7684\u57fa\u7c7b", "signature": "public List<Field> getFields(Class<?> clazz)", "code": "{ \nif ( null == clazz ) { \nreturn null ; \n} \nList < Field > fields = new ArrayList < Field > ( ) ; \nfor ( Field field : clazz . getFields ( ) ) { \nfields . add ( field ) ; \n} \nreturn fields ; \n} ", "end_by": "end_token"}
{"task_id": 48, "raw_nl": "Adds all of the elements in collection to the Set.", "signature": "public void addAll(Set<Integer> set, Collection<Integer> collection)", "code": "{ \nfor ( int i : collection ) { \nset . add ( i ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 49, "raw_nl": "Helper function to convert a long number into a byte array (least significant byte first).", "signature": "public byte[] longToBytes(long x)", "code": "{ \nbyte [ ] b = new byte [ 8 ] ; \nfor ( int i = 0 ; i < 8 ; i ++ ) { \nb [ i ] = ( byte ) x ; \nx >>>= 8 ; \n} \nreturn b ; \n} ", "end_by": "end_token"}
{"task_id": 50, "raw_nl": "\u5c06byte\u6570\u7ec4\u8f6c\u5316\u4e3a16\u8fdb\u5236\u5b57\u7b26\u4e32", "signature": "public String bytesToHexString(byte[] src)", "code": "{ \nStringBuilder stringBuilder = new StringBuilder ( ) ; \nif ( src == null || src . length <= 0 ) { \nreturn null ; \n} \nfor ( int i = 0 ; i < src . length ; i ++ ) { \nint v = src [ i ] & 0xFF ; \nString hv = Integer . toHexString ( v ) ; \nif ( hv . length ( ) < 2 ) { \nstringBuilder . append ( 0 ) ; \n} \nstringBuilder . append ( hv ) ; \n} \nreturn stringBuilder . toString ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 51, "raw_nl": "Returns a hash code value for this bit array.", "signature": "public int hashCode(byte[] byteArr)", "code": "{ \nint hashCode = 0 ; \nfor ( int i = 0 ; i < byteArr . length ; i ++ ) { \n// bit set index of byte i is index of bit at which the byte i is set\nint bitIndex = i % Byte . SIZE ; \nint arrayIndex = i / Byte . SIZE ; \nif ( byteArr [ arrayIndex ] & ( 1 << bitIndex ) ) { \nhashCode += bitIndex ; \n} \n} \nreturn hashCode ; \n} ", "end_by": "end_token"}
{"task_id": 52, "raw_nl": "Removes the entry with the specified key from this map if present.", "signature": "public void remove(Map<Integer, String> mapObj, Integer key)", "code": "{ \nif ( mapObj == null || key == null ) { \nreturn ; \n} \nmapObj . remove ( key ) ; \n} ", "end_by": "end_token"}
{"task_id": 53, "raw_nl": "Convert a primitive input array into its object array version (e.g. from int[] to Integer[]).", "signature": "public Integer[] toObjectArray(int[] array)", "code": "{ \nInteger [ ] result = new Integer [ array . length ] ; \nfor ( int i = 0 ; i < array . length ; i ++ ) { \nresult [ i ] = array [ i ] ; \n} \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 55, "raw_nl": "\u5224\u65ad\u5b57\u7b26\u4e32\u662f\u5426\u53ea\u542b\u5b57\u6bcd\u548c\u6570\u5b57", "signature": "public boolean isLetterOrDigit(String str)", "code": "{ \nString regex = \"^[a-zA-Z0-9]+$\" ; \nreturn str . matches ( regex ) ; \n} ", "end_by": "end_token"}
{"task_id": 56, "raw_nl": "\u5224\u65ad\u662f\u5426\u53ea\u542b\u5b57\u6bcd", "signature": "public boolean isLetter(char c)", "code": "{ \nif ( c >= 'a' && c <= 'z' ) \nreturn true ; \nelse \nreturn false ; \n} ", "end_by": "end_token"}
{"task_id": 57, "raw_nl": "Join 2 path elements if path separator not present at the end of first path element\uff0celse return the first element.", "signature": "public String joinPath(String path1, String path2)", "code": "{ \nif ( path1 . endsWith ( File . separator ) == false && path2 . endsWith ( File . separator ) == false ) { \nreturn path1 + path2 ; \n} else if ( path1 . endsWith ( File . separator ) ) { \nreturn path1 + path2 . substring ( 0 , path2 . length ( ) -1 ) ; \n} else if ( path2 . endsWith ( File . separator ) ) { \nreturn path1 + path2 . substring ( 0 , path2 . length ( ) -1 ) ; \n} else { \nreturn path1 + File . separator + path2 ; \n} \n} ", "end_by": "end_token"}
{"task_id": 58, "raw_nl": "Converts an int into an array of byte using the default (little endian, Lsb0) byte and bit ordering.", "signature": "public byte[] intToByteArray(int value)", "code": "{ \nbyte [ ] src = new byte [ 4 ] ; \nsrc [ 0 ] = ( byte ) ( value ) ; \nsrc [ 1 ] = ( byte ) ( ( value >>> 8 ) ) ; \nsrc [ 2 ] = ( byte ) ( ( value >>> 16 ) ) ; \nsrc [ 3 ] = ( byte ) ( ( value >>> 24 ) ) ; \nreturn src ; \n} ", "end_by": "end_token"}
{"task_id": 60, "raw_nl": "convert byte array to a hex string", "signature": "public String bytesToHex(byte[] bytes)", "code": "{ \nchar [ ] hexChars = new char [ bytes . length * 2 ] ; \nfor ( int j = 0 ; j < bytes . length ; j ++ ) { \nint v = bytes [ j ] & 0xFF ; \nhexChars [ j * 2 ] = hexArray [ v >>> 4 ] ; \nhexChars [ j * 2 + 1 ] = hexArray [ v & 0x0F ] ; \n} \nreturn new String ( hexChars ) ; \n} ", "end_by": "end_token"}
{"task_id": 62, "raw_nl": "Calculates combinatorial number C(n,m). ", "signature": "public int combinatorial(int n, int m)", "code": "{ \nif ( n < 0 || m < 0 ) { \nthrow new IllegalArgumentException ( \"Combinatorial values cannot be negative\" ) ; \n} \nif ( n > m ) { \nint temp = n ; \nn = m ; \nm = temp ; \n} \nint result = 1 ; \nfor ( int i = 1 ; i <= n ; i ++ ) { \nresult *= i ; \n} \nfor ( int i = 1 ; i <= m ; i ++ ) { \nresult /= i ; \n} \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 63, "raw_nl": "\u68c0\u9a8c\u7528\u6237\u540d\u662f\u5426\u5408\u6cd5\uff0c\u53ea\u80fd\u5305\u62eca-z,A-Z,0-9\u548c\u4e0b\u5212\u7ebf_\uff0c\u4e0d\u80fd\u4ee5\u4e0b\u5212\u7ebf\u7ed3\u5c3e \u7528\u6237\u540d\u6709\u6700\u5c0f\u957f\u5ea6\u548c\u6700\u5927\u957f\u5ea6\u9650\u5236\uff0c\u6bd4\u5982\u7528\u6237\u540d\u5fc5\u987b\u662f4-20\u4f4d", "signature": "public boolean checkUsername(String username)", "code": "{ \nif ( username . length ( ) > 20 ) { \nreturn false ; \n} \nif ( username . length ( ) < 4 || username . length ( ) > 10 ) { \nreturn false ; \n} \nif ( ! username . matches ( \"[a-zA-Z0-9_]+\" ) ) { \nreturn false ; \n} \nreturn true ; \n} ", "end_by": "end_token"}
{"task_id": 64, "raw_nl": "\u5f97\u5230\u73b0\u5728\u65f6\u95f4", "signature": "public String getStringToday(String format)", "code": "{ \nDate currentTime = new Date ( ) ; \nSimpleDateFormat formatter = new SimpleDateFormat ( format ) ; \nString dateString = formatter . format ( currentTime ) ; \nreturn dateString ; \n} ", "end_by": "end_token"}
{"task_id": 65, "raw_nl": "return the last day of the date's month of specified string value in format: yyyy-MM", "signature": "public Date getMonthLastDay(String dateString)", "code": "{ \nSimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"yyyy-MM\" ) ; \nDate date = null ; \ntry { \ndate = simpleDateFormat . parse ( dateString ) ; \n} catch ( Exception e ) { \ne . printStackTrace ( ) ; \n} \nCalendar calendar = Calendar . getInstance ( ) ; \nif ( date != null ) { \ncalendar . setTime ( date ) ; \n} \ncalendar . add ( Calendar . MONTH , 1 ) ; \ncalendar . add ( Calendar . DAY_OF_MONTH , -1 ) ; \nreturn calendar . getTime ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 66, "raw_nl": "Merges the given two lists to a new list, but eliminating duplicates elements.", "signature": "public <T> ArrayList<T> merge(ArrayList<T> list1, ArrayList<T> list2)", "code": "{ \nif ( list1 == null ) { \nreturn list2 ; \n} else if ( list2 == null ) { \nreturn list1 ; \n} \nArrayList < T > result = new ArrayList < T > ( ) ; \nresult . addAll ( list1 ) ; \nfor ( T elt : list2 ) { \nif ( ! result . contains ( elt ) ) { \nresult . add ( elt ) ; \n} \n} \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 67, "raw_nl": "Multiplies the vector by the transpose of the given matrix.", "signature": "public double[] multiplyTranspose(double[] vector, double[][] matrix)", "code": "{ \ndouble [ ] result = new double [ vector . length ] ; \nfor ( int i = 0 ; i < vector . length ; i ++ ) { \nresult [ i ] = 0 ; \nfor ( int j = 0 ; j < matrix [ i ] . length ; j ++ ) { \nresult [ i ] += vector [ i ] * matrix [ i ] [ j ] ; \n} \n} \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 68, "raw_nl": "Removes and returns last element in list, return null if empty.", "signature": "public String removeLast(ArrayList<String> list)", "code": "{ \nif ( list . size ( ) == 0 ) \nreturn null ; \nreturn list . remove ( list . size ( ) -1 ) ; \n} ", "end_by": "end_token"}
{"task_id": 69, "raw_nl": "Returns the largest value in linked list.", "signature": "public int getMax(LinkedList<Integer> list)", "code": "{ \nint max = list . getFirst ( ) ; \nfor ( int i = 1 ; i < list . size ( ) ; i ++ ) { \nif ( list . get ( i ) > max ) { \nmax = list . get ( i ) ; \n} \n} \nreturn max ; \n} ", "end_by": "end_token"}
{"task_id": 70, "raw_nl": "Calculate the elapsed time between two times specified in milliseconds.", "signature": "public long elapsedTime(Calendar start, Calendar end)", "code": "{ \nif ( start == null || end == null ) { \nthrow new IllegalArgumentException ( \"The dates must not be null\" ) ; \n} \nlong startMs = start . getTimeInMillis ( ) ; \nlong endMs = end . getTimeInMillis ( ) ; \nreturn ( endMs - startMs ) ; \n} ", "end_by": "end_token"}
{"task_id": 71, "raw_nl": "Compute the CRC32 of an array of bytes.", "signature": "public long crc32(byte[] bytes)", "code": "{ \nCrc32 crc = new Crc32 ( ) ; \ncrc . update ( bytes ) ; \nreturn crc . getValue ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 72, "raw_nl": "Create an instance of a clazz using the current thread context ClassLoader.", "signature": "public <T> T newInstance(Class<T> clazz)", "code": "{ \ntry { \nreturn clazz . newInstance ( ) ; \n} catch ( InstantiationException | IllegalAccessException e ) { \nthrow new RuntimeException ( e ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 73, "raw_nl": "Delete data from start until end index (end inclusive) of a object List.", "signature": "public <T> void delete(List<T> list, int start, int end) ", "code": "{ \nif ( start < 0 || end < start ) \nreturn ; \nif ( end > list . size ( ) ) \nend = list . size ( ) ; \nfor ( int i = end -1 ; i >= start ; i -- ) { \nlist . remove ( i ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 75, "raw_nl": "Get the number of days for the given month in the given year.", "signature": "public int getDaysInMonth(int year, int month)", "code": "{ \nif ( month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12 ) { \nreturn 31 ; \n} \nif ( month == 4 || month == 6 || month == 9 || month == 11 ) { \nreturn 30 ; \n} \nif ( month == 2 ) { \nif ( isLeapYear ( year ) ) { \nreturn 29 ; \n} else { \nreturn 28 ; \n} \n} \nreturn 0 ; \n} ", "end_by": "end_token"}
{"task_id": 76, "raw_nl": "\u5f97\u5230filepath\u8def\u5f84\u4e0b\u7b2c\u4e00\u5c42\u76ee\u5f55\u7ed3\u6784\u4e2d\u6240\u6709\u7684class\u6587\u4ef6", "signature": "public List<String> getClassFileNames(String filepath)", "code": "{ \nFile file = new File ( filepath ) ; \nList < String > list = new ArrayList < String > ( ) ; \nif ( file . exists ( ) ) { \nFile [ ] listFiles = file . listFiles ( ) ; \nfor ( File listFile : listFiles ) { \nif ( listFile . isDirectory ( ) ) { \nlist . addAll ( getClassFileNames ( listFile . getPath ( ) ) ) ; \n} else { \nString filename = listFile . getName ( ) ; \nif ( filename . endsWith ( \".class\" ) ) { \nlist . add ( filename ) ; \n} \n} \n} \n} \nreturn list ; \n} ", "end_by": "end_token"}
{"task_id": 78, "raw_nl": "\u7528str2\u66ff\u6362\u5b57\u7b26\u4e32str\u4e2d\u7b2c\u4e00\u4e2a\u51fa\u73b0\u7684str1", "signature": "public String replaceFirst(String str, String str1, String str2) ", "code": "{ \nif ( str == null || str1 == null || str2 == null ) { \nreturn null ; \n} \nreturn str . replaceFirst ( str1 , str2 ) ; \n} ", "end_by": "end_token"}
{"task_id": 79, "raw_nl": "Writes certain bytes from the specified byte array starting from an offset to this output stream.", "signature": "public void write(byte[] b, int off, int len, OutputStream outputStream)", "code": "throws IOException { \nif ( len < 0 ) { \nthrow new IndexOutOfBoundsException ( ) ; \n} \nint c = 0 ; \nwhile ( c < len ) { \nint i = off + c ; \nif ( i < b . length ) { \noutputStream . write ( b , i , 1 ) ; \n} else { \noutputStream . write ( 0 ) ; \n} \nc ++ ; \n} \n} ", "end_by": "end_token"}
{"task_id": 80, "raw_nl": "\u968f\u673a\u751f\u6210[origin, bound)\u8303\u56f4\u4e4b\u5185\u7684\u4e00\u4e2aint\u503c", "signature": "public int randomInt(int origin, int bound)", "code": "{ \nRandom random = new Random ( ) ; \nreturn origin + random . nextInt ( bound - origin ) ; \n} ", "end_by": "end_token"}
{"task_id": 81, "raw_nl": "\u4e0a\u4f20\u4e00\u4e2a\u6587\u4ef6filename\u81f3\u6307\u5b9a\u8def\u5f84pathname\u4e0b", "signature": "public void uploadFile(String pathname, String filename)", "code": "{ \ntry { \nFile file = new File ( pathname ) ; \nif ( ! file . exists ( ) ) { \nfile . mkdirs ( ) ; \n} \nString filepath = file . getAbsolutePath ( ) + File . separator + filename ; \nFile file1 = new File ( filepath ) ; \nFileInputStream fis = new FileInputStream ( file1 ) ; \nbyte [ ] buf = new byte [ 1024 ] ; \nint len ; \nwhile ( ( len = fis . read ( buf ) ) > 0 ) { \nfis . read ( buf ) ; \n} \nfis . close ( ) ; \n} catch ( Exception e ) { \ne . printStackTrace ( ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 82, "raw_nl": "Debug helper function that returns the diff of two property maps, only displaying the key that is different and in which map it exists compared to the other map,example:map:key1,key2 map2:key1,key2,key3", "signature": "public String diff(java.util.Map<String, String> map1, java.util.Map<String, String> map2) ", "code": "{ \nStringBuilder sb = new StringBuilder ( ) ; \nsb . append ( \"=== PropertyMap diff ===\\n\" ) ; \nsb . append ( \"map1:\\n\" ) ; \nsb . append ( map1 . toString ( ) ) ; \nsb . append ( \"\\n\" ) ; \nsb . append ( \"map2:\\n\" ) ; \nsb . append ( map2 . toString ( ) ) ; \nsb . append ( \"\\n\" ) ; \nsb . append ( \"=== PropertyMap diff ===\\n\" ) ; \nsb . append ( \"map1 size: \" + map1 . size ( ) + \"\\n\" ) ; \nsb . append ( \"map2 size: \" + map2 . size ( ) + \"\\n\" ) ; \nsb . append ( \"map1 keys: \" + map1 . keySet ( ) + \"\\n\" ) ; \nsb . append ( \"map2 keys: \" + map2 . keySet ( ) + \"\\n\" ) ; \nsb . append ( \"map1 values: \" + map1 . values ( ) + \"\\n\" ) ; \nsb . append ( \"map2 values: \" + map2 . values ( ) + \"\\n\" ) ; \nreturn sb . toString ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 83, "raw_nl": "Returns a new, immutable collection containing the names of all entities within the directory denoted by the current path", "signature": "public List<String> getFiles(String dir)", "code": "{ \nList < String > list = new ArrayList < String > ( ) ; \nFile file = new File ( dir ) ; \nif ( ! file . exists ( ) ) { \nreturn list ; \n} \nFile [ ] files = file . listFiles ( ) ; \nif ( files == null ) { \nreturn list ; \n} \nfor ( File f : files ) { \nif ( f . isFile ( ) ) { \nlist . add ( f . getName ( ) ) ; \n} \n} \nreturn list ; \n} ", "end_by": "end_token"}
{"task_id": 84, "raw_nl": "Rotate this a two-dimensional point around Y axis with the given angle in radians.", "signature": "public Point rotateY(double angle, Point point)", "code": "{ \ndouble sin = Math . sin ( angle ) ; \ndouble cos = Math . cos ( angle ) ; \nint x = ( int ) Math . round ( point . x * cos - point . y * sin ) ; \nint y = ( int ) Math . round ( point . x * sin + point . y * cos ) ; \nreturn new Point ( x , y ) ; \n} ", "end_by": "end_token"}
{"task_id": 85, "raw_nl": "If the string passed in is not blank or null and did not end with the trailing value, then appended the trailing value to it and return the result ", "signature": "public String appendTrailing(String str, String trailing)", "code": "{ \nif ( isBlank ( str ) ) { \nreturn trailing ; \n} \nif ( isBlank ( trailing ) ) { \nreturn str ; \n} \nreturn str + \" \" + trailing ; \n} ", "end_by": "end_token"}
{"task_id": 86, "raw_nl": "Returns true if the collection contains an element for the key.", "signature": "public boolean containsKey(Collection<String> collection, String key)", "code": "{ \nif ( collection == null || key == null ) { \nreturn false ; \n} \nreturn collection . contains ( key ) ; \n} ", "end_by": "end_token"}
{"task_id": 87, "raw_nl": "Returns true if the given object is an instance of the class or interface specified.", "signature": "public boolean isInstanceOf(Object object, Class<?> type)", "code": "{ \nif ( object == null ) { \nreturn false ; \n} \nif ( type . isInstance ( object ) ) { \nreturn true ; \n} \nif ( object instanceof String ) { \nreturn type . isInstance ( object ) ; \n} \nif ( object instanceof Number ) { \nreturn type . isInstance ( object ) ; \n} \nif ( object instanceof Boolean ) { \nreturn type . isInstance ( object ) ; \n} \nif ( object instanceof JSONObject ) { \nreturn type . isInstance ( object ) ; \n} \nif ( object instanceof JSONArray ) { \nreturn type . isInstance ( object ) ; \n} \nif ( object instanceof Map ) { \nreturn type . isInstance ( object ) ; \n} \nif ( object instanceof Collection ) { \nreturn type . isInstance ( object ) ; \n} \nif ( object . getClass ( ) . isArray ( ) ) { \nreturn type . isInstance ( object ) ; \n} \nreturn false ; \n} ", "end_by": "end_token"}
{"task_id": 88, "raw_nl": "\u5c0616\u8fdb\u5236\u5b57\u7b26\u4e32\u8f6c10\u8fdb\u5236", "signature": "public int hexStringToInt(String hexString)", "code": "{ \nif ( hexString == null || hexString . equals ( \"\" ) ) { \nreturn -1 ; \n} \nint result = 0 ; \nint index = 0 ; \nint n = 0 ; \nwhile ( index < hexString . length ( ) -1 ) { \nn = getHexValue ( hexString . charAt ( index ) ) ; \nif ( n < 0 ) { \nreturn -1 ; \n} \nresult = result + n * 16 ; \nindex ++ ; \n} \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 89, "raw_nl": "Add two integers, checking for overflow.", "signature": "public boolean checkOverflow(int x, int y)", "code": "{ \nif ( x < 0 || y < 0 ) { \nreturn true ; \n} \nif ( x > MAX_VALUE - y ) { \nreturn true ; \n} \nif ( y > MAX_VALUE - x ) { \nreturn true ; \n} \nreturn false ; \n} ", "end_by": "end_token"}
{"task_id": 90, "raw_nl": "Add the value to the HashSet given by map.get(key), creating a new HashSet if the HashSet is null", "signature": "public void addToSet(Map<String, HashSet<Integer>> map, String key, Integer value)", "code": "{ \nHashSet < Integer > set = map . get ( key ) ; \nif ( set == null ) { \nset = new HashSet < Integer > ( ) ; \nmap . put ( key , set ) ; \n} \nset . add ( value ) ; \n} ", "end_by": "end_token"}
{"task_id": 91, "raw_nl": "Calculate and return the average of the two values rounded DOWN.", "signature": "public int average(int a, int b)", "code": "{ \nint sum = a + b ; \nreturn ( sum <= 0 ) ? 0 : ( sum >= 255 ) ? 255 : sum / 2 ; \n} ", "end_by": "end_token"}
{"task_id": 92, "raw_nl": "Check if #MIN_VALUE <= value <= #MAX_VALUE and if not an IllegalArgumentException is thrown.", "signature": "public void checkRange(int value, int min, int max)", "code": "{ \nif ( ( value < min ) || ( value > max ) ) { \nthrow new IllegalArgumentException ( \"Value is out of range : \" + value ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 93, "raw_nl": "Check whether the String is a valid Java number", "signature": "public boolean isNumber(String str)", "code": "{ \nif ( StringUtils . isEmpty ( str ) ) { \nreturn false ; \n} \nchar [ ] chars = str . toCharArray ( ) ; \nint sz = chars . length ; \nboolean hasExp = false ; \nboolean hasDecPoint = false ; \nboolean allowSigns = false ; \nboolean foundDigit = false ; \n// deal with any possible sign up front\nint start = ( chars [ 0 ] == '-' ) ? 1 : 0 ; \nif ( sz > start + 1 ) { \nif ( chars [ start ] == '0' && chars [ start + 1 ] == 'x' ) { \nint i = start + 2 ; \nif ( i == sz ) { \nreturn false ; \n} \n// checking hex (it can't be anything else)\nfor ( ; i < chars . length ; i ++ ) { \nif ( ( chars [ i ] < '0' || chars [ i ] > '9' ) && ( chars [ i ] < 'a' || chars [ i ] > 'f' ) && ( chars [ i ] < 'A' || chars [ i ] > 'F' ) ) { \nreturn false ; \n} \n} \nreturn true ; \n} \n} \n// don't want to loop to the last char, check it afterwords\nsz -- ; \n// for type qualifiers\nint i = start ; \n// make a valid number (e.g. chars[0..5] = \"1234E\")\nwhile ( i < sz || ( i < sz + 1 && allowSigns && ! foundDigit ) ) { \nif ( chars [ i ] >= '0' && chars [ i ] <= '9' ) { \nfoundDigit = true ; \nallowSigns = false ; \n} else if ( chars [ i ] == '.' ) { \nif ( hasDecPoint || hasExp ) { \n// two decimal points or dec in exponent\nreturn false ; \n} \nhasDecPoint = true ; \n} else if ( chars [ i ] == 'e' || chars [ i ] == 'E' ) { \n// we've already taken care of hex.\nif ( hasExp ) { \n// two E's\nreturn false ; \n} \nif ( ! foundDigit ) { \nreturn false ; \n} \nhasExp = true ; \nallowSigns = true ; \n} else if ( chars [ i ] == '+' || chars [ i ] == '-' ) { \nif ( ! allowSigns ) { \nreturn false ; \n} \nallowSigns = false ; \n// we need a digit after the E\nfoundDigit = false ; \n} else { \nreturn false ; \n} \ni ++ ; \n} \nif ( i < chars . length ) { \nif ( chars [ i ] >= '0' && chars [ i ] <= '9' ) { \n// no type qualifier, OK\nreturn true ; \n} \nif ( chars [ i ] == 'e' || chars [ i ] == 'E' ) { \n// can't have an E at the last byte\nreturn false ; \n} \nif ( chars [ i ] == '.' ) { \nif ( hasDecPoint || hasExp ) { \n// two decimal points or dec in exponent\nreturn false ; \n} \n// single trailing decimal point after non-exponent is ok\nreturn foundDigit ; \n} \nif ( ! allowSigns && ( chars [ i ] == 'd' || chars [ i ] == 'D' || chars [ i ] == 'f' || chars [ i ] == 'F' ) ) { \nreturn foundDigit ; \n} \nif ( chars [ i ] == 'l' || chars [ i ] == 'L' ) { \n// not allowing L with an exponent or decimal point\nreturn foundDigit && ! hasExp && ! hasDecPoint ; \n} \n// last character is illegal\nreturn false ; \n} \n// found digit it to make sure weird stuff like '.' and '1E-' doesn't pass\n", "end_by": "max_len"}
{"task_id": 94, "raw_nl": "Choose a pseudo-random element from the specified array.", "signature": "public int random(int[] array)", "code": "{ \nint index = random . nextInt ( array . length ) ; \nreturn array [ index ] ; \n} ", "end_by": "end_token"}
{"task_id": 95, "raw_nl": "Compare two java objects for equality.", "signature": "public boolean equals(Object o1, Object o2)", "code": "{ \nif ( o1 == o2 ) { \nreturn true ; \n} \nif ( o1 == null || o2 == null ) { \nreturn false ; \n} \nif ( o1 instanceof Number && o2 instanceof Number ) { \nreturn ( ( Number ) o1 ) . doubleValue ( ) == ( ( Number ) o2 ) . doubleValue ( ) ; \n} \nreturn o1 . equals ( o2 ) ; \n} ", "end_by": "end_token"}
{"task_id": 96, "raw_nl": "Compute the product of this matrix and the given column vector.", "signature": "public double[] product(double[] columnVector,double[][] matrix)", "code": "{ \nif ( columnVector . length != matrix [ 0 ] . length ) { \nthrow new IllegalArgumentException ( \"The column vector and matrix must have the same length.\" ) ; \n} \ndouble [ ] product = new double [ matrix . length ] ; \nfor ( int i = 0 ; i < matrix . length ; i ++ ) { \nproduct [ i ] = 0 ; \nfor ( int j = 0 ; j < matrix [ 0 ] . length ; j ++ ) { \nproduct [ i ] += matrix [ i ] [ j ] * columnVector [ j ] ; \n} \n} \nreturn product ; \n} ", "end_by": "end_token"}
{"task_id": 97, "raw_nl": "Concatenate two arrays of T type", "signature": "public <T> T[] concat(T[] a, T[] b)", "code": "{ \nT [ ] c = Arrays . copyOf ( a , a . length + b . length ) ; \nSystem . arraycopy ( b , 0 , c , a . length , b . length ) ; \nreturn c ; \n} ", "end_by": "end_token"}
{"task_id": 98, "raw_nl": "Convert the text '&' mnemonic string to text string. The '&' symbol is treated as the mnemonic pointer. The double \"&&\" symbols are treated as the single '&'. For example the string \"&Look && Feel\" is converted to \"Look & Feel\".", "signature": "public String convertMnemonicString(String text)", "code": "{ \nStringBuilder sb = new StringBuilder ( ) ; \nint prevIndex = 0 ; \nint nextIndex = text . indexOf ( '&' ) ; \nint len = text . length ( ) ; \nwhile ( nextIndex != -1 ) { \nString s = text . substring ( prevIndex , nextIndex ) ; \nsb . append ( s ) ; \nnextIndex ++ ; \nif ( nextIndex != len && text . charAt ( nextIndex ) == '&' ) { \nsb . append ( '&' ) ; \nnextIndex ++ ; \n} \nprevIndex = nextIndex ; \nnextIndex = text . indexOf ( '&' , nextIndex + 1 ) ; \n} \nsb . append ( text . substring ( prevIndex , text . length ( ) ) ) ; \nreturn sb . toString ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 99, "raw_nl": "Convert a boolean value into a string.", "signature": "public String boolToString(boolean b)", "code": "{ \nif ( b ) { \nreturn \"true\" ; \n} else { \nreturn \"false\" ; \n} \n} ", "end_by": "end_token"}
{"task_id": 100, "raw_nl": "Convert an arbitrary text encoding to its canonical name.", "signature": "public String canonicalEncodingName(String encoding)", "code": "{ \nif ( encoding == null ) { \nreturn null ; \n} \ntry { \nreturn Charset . forName ( encoding ) . name ( ) ; \n} catch ( IllegalCharsetNameException icne ) { \nreturn encoding ; \n} catch ( UnsupportedCharsetException uce ) { \nreturn encoding ; \n} \n} ", "end_by": "end_token"}
{"task_id": 101, "raw_nl": "Create a copy of the Integer array.", "signature": "public int[] copy(int[] arr)", "code": "{ \nif ( arr == null ) { \nreturn null ; \n} \nint [ ] copy = new int [ arr . length ] ; \nSystem . arraycopy ( arr , 0 , copy , 0 , arr . length ) ; \nreturn copy ; \n} ", "end_by": "end_token"}
{"task_id": 102, "raw_nl": "Returns the current number of entries in the map.", "signature": "public int size(Map<String, String> map)", "code": "{ \nint result = 0 ; \nif ( map != null ) { \nresult = map . size ( ) ; \n} \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 103, "raw_nl": "Returns true if two doubles are considered equal. Tests if the absolute difference between the two doubles has a difference less then a given double (epsilon)Returns true if two doubles are considered equal. Tests if the absolute difference between the two doubles has a difference less then a given double (epsilon)", "signature": "public boolean equals(double a, double b, double epsilon)", "code": "{ \nif ( a == b ) \nreturn true ; \nelse if ( Math . abs ( a - b ) < epsilon ) \nreturn true ; \nelse \nreturn false ; \n} ", "end_by": "end_token"}
{"task_id": 104, "raw_nl": "Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if necessary.", "signature": "public void putShort(byte[] data, byte b, short s)", "code": "{ \nint length = data . length ; \nif ( length + 2 > data . length ) { \nenlarge ( 2 ) ; \n} \ndata [ length ++ ] = b ; \ndata [ length ++ ] = ( byte ) ( s >>> 8 ) ; \ndata [ length ] = ( byte ) s ; \n} ", "end_by": "end_token"}
{"task_id": 105, "raw_nl": "Advances the iterator either forward or backward the specified number of steps. Negative values move backward, and positive values move forward. This is equivalent to repeatedly calling next() or previous().", "signature": "public int next(Iterator<Integer> iterator, int n)", "code": "{ \nint result = 0 ; \nwhile ( n > 0 && iterator . hasNext ( ) ) { \nresult = iterator . next ( ) ; \n-- n ; \n} \nwhile ( iterator . hasNext ( ) ) { \niterator . next ( ) ; \n++ n ; \n} \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 106, "raw_nl": "\u4e00\u7ef4\u6570\u7ec4\u8f6c\u4e3a\u4e8c\u7ef4\u6570\u7ec4", "signature": "public int[][] arrayToMatrix(int[] m, int width, int height)", "code": "{ \nint [ ] [ ] result = new int [ height ] [ width ] ; \nfor ( int i = 0 ; i < height ; i ++ ) { \nfor ( int j = 0 ; j < width ; j ++ ) { \nint p = j * height + i ; \nresult [ i ] [ j ] = m [ p ] ; \n} \n} \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 107, "raw_nl": "Verifies that the given array is not null or empty.", "signature": "public boolean checkNotNullOrEmpty(int[] array)", "code": "{ \ncheckNotNull ( array ) ; \nreturn array . length != 0 ; \n} ", "end_by": "end_token"}
{"task_id": 108, "raw_nl": "Removes all white spaces from a string A whitespace is identified using the Java method Character.isWhiteSpace", "signature": "public String removeAllWhiteSpaces(String str)", "code": "{ \nif ( isEmpty ( str ) ) { \nreturn \"\" ; \n} \nStringBuilder sb = new StringBuilder ( str ) ; \nint sz = sb . length ( ) ; \nchar c ; \nfor ( int i = 0 ; i < sz ; i ++ ) { \nc = sb . charAt ( i ) ; \nif ( ! Character . isWhitespace ( c ) ) { \nsb . setCharAt ( i , ' ' ) ; \n} \n} \nreturn sb . toString ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 109, "raw_nl": "subtract b from a", "signature": "public String[] sub(String[] a, String[] b)", "code": "{ \nString [ ] c = new String [ a . length ] ; \nfor ( int i = 0 ; i < a . length ; i ++ ) { \nc [ i ] = sub ( a [ i ] , b [ i ] ) ; \n} \nreturn c ; \n} ", "end_by": "end_token"}
{"task_id": 110, "raw_nl": "Converts the string argument into a float value.", "signature": "public float parseFloat(String floatStr)", "code": "{ \nif ( floatStr == null ) \nreturn -1 ; \nreturn new Float ( floatStr ) . floatValue ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 111, "raw_nl": "Return true if the local path is a Windows absolute path.", "signature": "private boolean isWindowsAbsolutePath(String path)", "code": "{ \nif ( ! isAbsolutePath ( path ) ) \nreturn false ; \n// On Windows, an absolute path starts with \"[drive_letter]:\\\".\nif ( path . length ( ) > 2 && path . charAt ( 1 ) == ':' && Character . isLetter ( path . charAt ( 0 ) ) && ( path . charAt ( 2 ) == '\\\\' || path . charAt ( 2 ) == '/' ) ) \nreturn true ; \nelse \nreturn false ; \n} ", "end_by": "end_token"}
{"task_id": 112, "raw_nl": "Calculates the distance between two points in high-dimensional space.", "signature": "public double length(double[] p0, double[] p1)", "code": "{ \ndouble sum = 0 ; \nfor ( int i = 0 ; i < p0 . length ; i ++ ) { \ndouble d = p0 [ i ] - p1 [ i ] ; \nsum += d * d ; \n} \nreturn Math . sqrt ( sum ) ; \n} ", "end_by": "end_token"}
{"task_id": 113, "raw_nl": "This function takes an array of words, and returns a string with all the words in the separated by a space.", "signature": "public String getStringfromStringArray(String[] array)", "code": "{ \nString s = \"\" ; \nif ( array == null ) { \nreturn s ; \n} \nfor ( int i = 0 ; i < array . length ; i ++ ) { \ns += array [ i ] + \" \" ; \n} \nreturn s ; \n} ", "end_by": "end_token"}
{"task_id": 114, "raw_nl": "Check whether a file is actually a valid zip", "signature": "public boolean isValidZip(File zip)", "code": "{ \nZipFile zipFile = null ; \ntry { \nzipFile = new ZipFile ( zip ) ; \n} catch ( IOException e ) { \nreturn false ; \n} finally { \nif ( zipFile != null ) { \ntry { \nzipFile . close ( ) ; \n} catch ( IOException e ) { \n// ignore\n} \n} \n} \nreturn true ; \n} ", "end_by": "end_token"}
{"task_id": 115, "raw_nl": "Parse a list of longs into strings.", "signature": "public String[] toTimestampStrs(long[] timestamps)", "code": "{ \nif ( timestamps == null ) { \nreturn null ; \n} \nString [ ] result = new String [ timestamps . length ] ; \nfor ( int i = 0 ; i < timestamps . length ; ++ i ) { \nresult [ i ] = Long . toString ( timestamps [ i ] ) ; \n} \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 116, "raw_nl": "Change the size of this array. Content between indexes 0 and min(size(), newSize) will be preserved.", "signature": "public void resize(int[] arr,long newSize)", "code": "{ \nfinal int numPages = numPages ( newSize ) ; \nif ( numPages > arr . length ) { \nthrow new IllegalArgumentException ( \"Requested size \" + newSize + \" exceeds current size of array (\" + arr . length + \")\" ) ; \n} \nif ( numPages < arr . length ) { \n// getBestPage() will only be called if needed\nfinal int [ ] newArr = new int [ numPages ] ; \nif ( arr . length > 0 ) { \nSystem . arraycopy ( arr , 0 , newArr , 0 , arr . length ) ; \n} \narr = newArr ; \n} \n} ", "end_by": "end_token"}
{"task_id": 117, "raw_nl": "\u6982\u8ff0\uff1a\u622a\u53d6\u6307\u5b9a\u957f\u5ea6\u7684\u6570\u7ec4", "signature": "public byte[] subBytes(byte[] src, int pos, int count)", "code": "{ \nbyte [ ] dest = new byte [ count ] ; \nSystem . arraycopy ( src , pos , dest , 0 , count ) ; \nreturn dest ; \n} ", "end_by": "end_token"}
{"task_id": 118, "raw_nl": "\u8fd4\u56de\u4e0d\u5c0f\u4e8e\u8f93\u5165\u503cvalue\u7684\u6700\u5c0f\u6574\u6570", "signature": "public int floor(double val)", "code": "{ \nint i = ( int ) val ; \nreturn val < i ? i -1 : i ; \n} ", "end_by": "end_token"}
{"task_id": 119, "raw_nl": "\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570", "signature": "public String formatDouble(double val)", "code": "{ \nDecimalFormat df = new DecimalFormat ( \"#.00\" ) ; \nreturn df . format ( val ) ; \n} ", "end_by": "end_token"}
{"task_id": 120, "raw_nl": "Compares the two specified double values,return 1 if the first value is greater than the second value,-1 if the first value is less than the second value,0 if the two values are equal. There are two special cases: Double.NaN is equal to Double.NaN and it is greater than any other double value, including Double.POSITIVE_INFINITY; +0.0d is greater than -0.0d", "signature": "public int compare(double double1, double double2)", "code": "{ \nif ( double1 < double2 ) { \nreturn -1 ; \n} \nif ( double1 > double2 ) { \nreturn 1 ; \n} \nreturn 0 ; \n} ", "end_by": "end_token"}
{"task_id": 121, "raw_nl": "Get the index of the next slash.", "signature": "public int getNextSlash(String path, int index)", "code": "{ \nint nextSlash = path . indexOf ( '/' , index + 1 ) ; \nif ( nextSlash == -1 || nextSlash == path . length ( ) -1 ) { \nreturn -1 ; \n} \nreturn nextSlash ; \n} ", "end_by": "end_token"}
{"task_id": 122, "raw_nl": "Returns true if all entries of (all subarrays of) the input array are >= 0. Returns true if the array is non-null, but empty", "signature": "public boolean isNonNegative(long[][] in)", "code": "{ \nfor ( int i = 0 ; i < in . length ; i ++ ) { \nfor ( int j = 0 ; j < in [ i ] . length ; j ++ ) { \nif ( in [ i ] [ j ] < 0 ) { \nreturn false ; \n} \n} \n} \nreturn true ; \n} ", "end_by": "end_token"}
{"task_id": 123, "raw_nl": "Returns maximum possible integer, less or equal than oldValue, divisible by quantum.", "signature": "public int floor(int x, int quantum)", "code": "{ \nint i = x / quantum ; \nreturn x - ( i * quantum ) ; \n} ", "end_by": "end_token"}
{"task_id": 124, "raw_nl": "Appends an item to the list.", "signature": "public void append(List<String> list, String item)", "code": "{ \nif ( list . size ( ) > 0 ) { \nlist . set ( list . size ( ) -1 , list . get ( list . size ( ) -1 ) + \" \" + item ) ; \n} else { \nlist . add ( item ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 125, "raw_nl": "\u5224\u65ad\u67d0\u4e2a\u65e5\u671f\u5c5e\u4e8e\u672c\u6708\u7684\u7b2c\u51e0\u5929", "signature": "public int getDaysByMonth(String dateTime)", "code": "{ \nCalendar cal = Calendar . getInstance ( ) ; \ncal . setTime ( parse ( dateTime ) ) ; \nreturn cal . getActualMaximum ( Calendar . DAY_OF_MONTH ) ; \n} ", "end_by": "end_token"}
{"task_id": 126, "raw_nl": "Unzip the contents of the given zip in the given directory (create it if it doesn't exist)", "signature": "public void unzip(String zipPath, String destDirPath)", "code": "throws IOException { \nInputStream zipIn = new FileInputStream ( zipPath ) ; \nbyte [ ] buf = new byte [ 8192 ] ; \nFile destDir = new File ( destDirPath ) ; \nString canonicalDestDirPath = destDir . getCanonicalPath ( ) ; \nZipInputStream zis = new ZipInputStream ( zipIn ) ; \nFileOutputStream fos = null ; \ntry { \nZipEntry zEntry ; \nwhile ( ( zEntry = zis . getNextEntry ( ) ) != null ) { \n// if it is empty directory, create it\nif ( zEntry . isDirectory ( ) ) { \nnew File ( destDir , zEntry . getName ( ) ) . mkdirs ( ) ; \ncontinue ; \n} \n// if it is a file, extract it\nString filePath = getZipEntryFileName ( destDir , zEntry , canonicalDestDirPath ) ; \nint lastSeparator = filePath . lastIndexOf ( \"/\" ) ; \nString fileDir = \"\" ; \nif ( lastSeparator >= 0 ) { \nfileDir = filePath . substring ( 0 , lastSeparator ) ; \n} \n// create directory for a file\nnew File ( destDir , fileDir ) . mkdirs ( ) ; \n// write file\nFile outFile = new File ( destDir , filePath ) ; \nfos = new FileOutputStream ( outFile ) ; \nint n = 0 ; \nwhile ( ( n = zis . read ( buf ) ) >= 0 ) { \nfos . write ( buf , 0 , n ) ; \n} \nfos . close ( ) ; \n} \n} catch ( IOException ioe ) { \nif ( fos != null ) { \ntry { \nfos . close ( ) ; \n} catch ( IOException ioe2 ) { \n} \n} \n} finally { \ntry { \nzipIn . close ( ) ; \nif ( zis != null ) \nzis . close ( ) ; \n} catch ( IOException ioe ) { \n} \n} \n} ", "end_by": "end_token"}
{"task_id": 127, "raw_nl": "returns a array including given range. [start, end)", "signature": "public int[] range(int start, int end)", "code": "{ \nint [ ] a = new int [ end - start + 1 ] ; \nfor ( int i = start ; i <= end ; i ++ ) { \na [ i - start ] = i ; \n} \nreturn a ; \n} ", "end_by": "end_token"}
{"task_id": 128, "raw_nl": "Clear the given calendar, setting to zero all time values less than or equal to that of the given field. For example, clearing to Calendar#HOUR will floor the time to nearest hour which occurred before or at the given time (e.g., 1:32 --> 1:30).", "signature": "public Calendar clearTo(Calendar c, int field)", "code": "{ \nint i = timeClip ( c . getTimeInMillis ( ) ) ; \nif ( i == field ) { \n// clear all time values\nc . clear ( ) ; \n} else if ( i < field ) { \n// clear all time values less than the given field\nc . clear ( field ) ; \n} else { \n// clear all time values greater than the given field\nc . clear ( field ) ; \n// we are clearing all fields beyond the given field\nif ( field == Calendar . DAY_OF_MONTH ) { \nc . set ( Calendar . DAY_OF_MONTH , 1 ) ; \nc . clear ( Calendar . HOUR_OF_DAY ) ; \nc . clear ( Calendar . MINUTE ) ; \nc . clear ( Calendar . SECOND ) ; \nc . clear ( Calendar . MILLISECOND ) ; \n} else if ( field == Calendar . MONTH ) { \nc . set ( Calendar . DAY_OF_MONTH , 1 ) ; \nc . clear ( Calendar . HOUR_OF_DAY ) ; \nc . clear ( Calendar . MINUTE ) ; \nc . clear ( Calendar . SECOND ) ; \nc . clear ( Calendar . MILLISECOND ) ; \n} else if ( field == Calendar . YEAR ) { \nc . clear ( Calendar . DAY_OF_MONTH ) ; \nc . clear ( Calendar . HOUR_OF_DAY ) ; \nc . clear ( Calendar . MINUTE ) ; \nc . clear ( Calendar . SECOND ) ; \nc . clear ( Calendar . MILLISECOND ) ; \n} \n} \nreturn c ; \n} ", "end_by": "end_token"}
{"task_id": 129, "raw_nl": "\u83b7\u53d6\u5f53\u524d\u7cfb\u7edf\u65f6\u95f4 minute\u5206\u949f\u540e \u7684\u65f6\u95f4", "signature": "public String getNowDate(int minute)", "code": "{ \nSimpleDateFormat sdf = new SimpleDateFormat ( \"yyyy-MM-dd HH:mm:ss\" ) ; \nCalendar calendar = Calendar . getInstance ( ) ; \ncalendar . add ( Calendar . MINUTE , minute ) ; \nreturn sdf . format ( calendar . getTime ( ) ) ; \n} ", "end_by": "end_token"}
{"task_id": 130, "raw_nl": "Check the given value is in int range.", "signature": "public boolean isDecimalWithinIntRange(BigDecimal decimalValue)", "code": "{ \nif ( decimalValue == null ) { \nreturn false ; \n} \nreturn decimalValue . compareTo ( new BigDecimal ( Integer . MIN_VALUE ) ) >= 0 && decimalValue . compareTo ( new BigDecimal ( Integer . MAX_VALUE ) ) <= 0 ; \n} ", "end_by": "end_token"}
{"task_id": 131, "raw_nl": "Produces a new double array containing the elements between the start and end indices. The start index is inclusive, the end index exclusive. Null array input produces null output.", "signature": "public double[] subarray(final double[] array, int startIndexInclusive, int endIndexExclusive)", "code": "{ \nif ( array == null ) { \nreturn null ; \n} \nif ( startIndexInclusive < 0 ) { \nstartIndexInclusive = 0 ; \n} \nif ( endIndexExclusive > array . length ) { \nendIndexExclusive = array . length ; \n} \nfinal int newSize = endIndexExclusive - startIndexInclusive ; \nif ( newSize <= 0 ) { \nreturn EMPTY_DOUBLE_ARRAY ; \n} \nfinal double [ ] subarray = new double [ newSize ] ; \nSystem . arraycopy ( array , startIndexInclusive , subarray , 0 , newSize ) ; \nreturn subarray ; \n} ", "end_by": "end_token"}
{"task_id": 132, "raw_nl": "\u5c06\u5fae\u535a\u65f6\u95f4\u5b57\u7b26\u4e32\u8f6c\u6362\u6210yyyyMMddHHmmSS \u5fae\u535a\u65f6\u95f4\u5b57\u7b26\u4e32\u6709\uff1a xx\u5206\u949f\u524d \u4eca\u5929 11:53 07\u670809\u65e5 13:36 2010-09-23 19:55:38", "signature": "public String parseDate(String weiboTimeStr)", "code": "{ \n// \u5c06\u5b57\u7b26\u4e32\u8f6c\u6362\u4e3a\u65e5\u671f\nDate weiboTime = parseWeiboDate ( weiboTimeStr ) ; \n// \u521b\u5efa\u4e00\u4e2a\u65e5\u671f\u683c\u5f0f\nSimpleDateFormat sdf = new SimpleDateFormat ( \"yyyy-MM-dd HH:mm:ss\" ) ; \n// \u5c06\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\nString weiboTimeStr2 = sdf . format ( weiboTime ) ; \nreturn weiboTimeStr2 ; \n} ", "end_by": "end_token"}
{"task_id": 133, "raw_nl": "\u8fd4\u56de\u5f53\u6708\u5f00\u59cb\u65f6\u95f4", "signature": "public long currentMonthStartUnixTime()", "code": "{ \nCalendar cal = Calendar . getInstance ( ) ; \ncal . set ( Calendar . DAY_OF_MONTH , 1 ) ; \nreturn cal . getTimeInMillis ( ) / 1000 ; \n} ", "end_by": "end_token"}
{"task_id": 134, "raw_nl": "Multiply Long and Double numbers.", "signature": "public Long multiply(Long number, Double multiplier)", "code": "{ \nif ( number == 0 || multiplier == 0 ) { \nreturn 0L ; \n} \ndouble bigNumber = Double . max ( Math . abs ( number ) , Math . abs ( multiplier ) ) ; \ndouble smallNumber = Double . min ( Math . abs ( number ) , Math . abs ( multiplier ) ) ; \ndouble maxMultiplier = Long . MAX_VALUE / bigNumber ; \nif ( smallNumber < maxMultiplier ) { \nreturn Double . valueOf ( number * multiplier ) . longValue ( ) ; \n} else if ( bigNumber < maxMultiplier ) { \nreturn Long . valueOf ( number * multiplier ) . longValue ( ) ; \n} else { \nif ( ( number > 0 && multiplier < 0 ) || ( number < 0 && multiplier > 0 ) ) { \nreturn Long . MIN_VALUE ; \n} else { \nreturn Long . MAX_VALUE ; \n} \n} \n} ", "end_by": "end_token"}
{"task_id": 135, "raw_nl": "Multiply two Short numbers.", "signature": "public Short multiply(Short a, Short b)", "code": "{ \nif ( a == 0 || b == 0 ) { \nreturn 0 ; \n} \nint bigNumber = Integer . max ( Math . abs ( a ) , Math . abs ( b ) ) ; \nint smallNumber = Integer . min ( Math . abs ( a ) , Math . abs ( b ) ) ; \nint maxMultiplier = Short . MAX_VALUE / bigNumber ; \nif ( smallNumber < maxMultiplier ) { \nreturn Integer . valueOf ( a * b ) . shortValue ( ) ; \n} else { \nif ( ( a > 0 && b < 0 ) || ( a < 0 && b > 0 ) ) { \nreturn Short . MIN_VALUE ; \n} else { \nreturn Short . MAX_VALUE ; \n} \n} \n} ", "end_by": "end_token"}
{"task_id": 136, "raw_nl": "Attempt to find a field on the supplied Class with the supplied name and/or type. Searches all superclasses up to Object.", "signature": "public Field findField(Class clazz, String name, Class type)", "code": "{ \nif ( clazz == null ) { \nthrow new IllegalArgumentException ( \"Class must not be null\" ) ; \n} \nif ( name == null && type == null ) { \nthrow new IllegalArgumentException ( \"Either name or type of the field must be specified\" ) ; \n} \nClass searchType = clazz ; \nwhile ( ! Object . class . equals ( searchType ) && searchType != null ) { \nField [ ] fields = searchType . getDeclaredFields ( ) ; \nfor ( int i = 0 ; i < fields . length ; i ++ ) { \nField field = fields [ i ] ; \nif ( ( name == null || name . equals ( field . getName ( ) ) ) && ( type == null || type . equals ( field . getType ( ) ) ) ) { \nreturn field ; \n} \n} \nsearchType = searchType . getSuperclass ( ) ; \n} \nreturn null ; \n} ", "end_by": "end_token"}
{"task_id": 137, "raw_nl": "\u83b7\u53d6request\u7684IP\u5730\u5740", "signature": "public String getIPAddr(HttpRequest request)", "code": "", "end_by": "repeat_pattern"}
{"task_id": 138, "raw_nl": "Convert byte array to binary String", "signature": "public String toBinary(byte[] pBytes) ", "code": "{ \nStringBuilder result = new StringBuilder ( ) ; \nfor ( byte b : pBytes ) { \nfor ( int j = 7 ; j >= 0 ; j -- ) { \nresult . append ( ( ( b & 1 ) == 0 ) ? '0' : '1' ) ; \nb >>= 1 ; \n} \n} \nreturn result . toString ( ) ; \n} ", "end_by": "end_token"}
{"task_id": 139, "raw_nl": "Convert arguments of a method (signature) to an array of Type objects.", "signature": "public Type[] getArgumentTypes(String signature)", "code": "{ \nArrayList vec = new ArrayList ( ) ; \nint index ; \nType [ ] types ; \ntry { \n// Read all declarations between for `(' and `)'\nif ( signature . charAt ( 0 ) != '(' ) \nthrow new ClassFormatException ( \"Invalid method signature: \" + signature ) ; \n// current string position\nindex = 1 ; \nwhile ( signature . charAt ( index ) != ')' ) { \nvec . add ( getType ( signature . substring ( index ) ) ) ; \n// update position\nindex += consumed_chars ; \n} \n} catch ( StringIndexOutOfBoundsException e ) { \n// Should never occur\nthrow new ClassFormatException ( \"Invalid method signature: \" + signature ) ; \n} \ntypes = new Type [ vec . size ( ) ] ; \nvec . toArray ( types ) ; \nreturn types ; \n} ", "end_by": "end_token"}
{"task_id": 140, "raw_nl": "Convert a partial buffer to a String.", "signature": "public String toString(ByteBuffer buffer, int position, int length, Charset charset)", "code": "{ \nif ( buffer == null ) \nreturn null ; \nbyte [ ] array = buffer . hasArray ( ) ? buffer . array ( ) : null ; \nif ( array == null ) { \nByteBuffer buf = buffer . duplicate ( ) ; \nbuf . position ( position ) ; \nbuf . limit ( position + length ) ; \nreturn new String ( buf . array ( ) , buf . arrayOffset ( ) , buf . capacity ( ) , charset ) ; \n} \nreturn new String ( array , buffer . arrayOffset ( ) + position , length , charset ) ; \n} ", "end_by": "end_token"}
{"task_id": 141, "raw_nl": "\u4e24\u4e2a\u65f6\u95f4\u4e4b\u95f4\u76f8\u5dee\u8ddd\u79bb\u591a\u5c11\u5929,\u65f6\u95f4\u683c\u5f0fyyyy-MM-dd", "signature": "public long getDistanceDays(String str1, String str2)", "code": "{ \nDateFormat df = new SimpleDateFormat ( \"yyyy-MM-dd\" ) ; \nDate one ; \nDate two ; \nlong days = 0 ; \ntry { \none = df . parse ( str1 ) ; \ntwo = df . parse ( str2 ) ; \nlong time1 = one . getTime ( ) ; \nlong time2 = two . getTime ( ) ; \nlong diff ; \nif ( time1 < time2 ) { \ndiff = time2 - time1 ; \n} else { \ndiff = time1 - time2 ; \n} \ndays = diff / ( 24 * 60 * 60 * 1000 ) ; \n} catch ( ParseException e ) { \ne . printStackTrace ( ) ; \n} \nreturn days ; \n} ", "end_by": "end_token"}
{"task_id": 142, "raw_nl": "\u83b7\u53d6url\u7684\u9876\u7ea7\u57df\u540d", "signature": "public String getTopDomain(String url)", "code": "{ \nif ( url . endsWith ( \"/\" ) ) { \nurl = url . substring ( 0 , url . length ( ) -1 ) ; \n} \nString [ ] split = url . split ( \"/\" ) ; \nreturn split [ split . length -1 ] ; \n} ", "end_by": "end_token"}
{"task_id": 143, "raw_nl": "Returns true if the given String matches to one of the provided Patterns, false otherwise.", "signature": "public boolean matchesPattern(String _string, Pattern[] _patterns)", "code": "{ \nfor ( Pattern p : _patterns ) { \nif ( p . matcher ( _string ) . matches ( ) ) { \nreturn true ; \n} \n} \nreturn false ; \n} ", "end_by": "end_token"}
{"task_id": 144, "raw_nl": "Extracts all the files in the given zip file to the input destination path. If zip file does not exist or destination path is invalid then an exception is thrown.", "signature": "public void extractAll(String destPath, String zipName)", "code": "throws IOException { \nFile zipFile = new File ( zipName ) ; \nif ( zipFile . exists ( ) ) { \nif ( zipFile . isDirectory ( ) ) { \nString [ ] files = zipFile . list ( ) ; \nfor ( String file : files ) { \nString destFile = destPath + File . separator + file ; \nextractAll ( destFile , zipName ) ; \n} \n} else { \nif ( ! destPath . endsWith ( File . separator ) ) { \ndestPath += File . separator ; \n} \ndestPath += zipName ; \ntry ( FileInputStream fis = new FileInputStream ( zipFile ) ; \nZipInputStream zis = new ZipInputStream ( fis ) ) { \nZipEntry entry ; \nwhile ( ( entry = zis . getNextEntry ( ) ) != null ) { \nString filename = entry . getName ( ) ; \nif ( ! filename . startsWith ( destPath ) ) { \nthrow new IOException ( \"Entry is outside of the target directory: \" + filename ) ; \n} \nif ( entry . isDirectory ( ) ) { \nString dirName = filename . substring ( destPath . length ( ) ) ; \ndirName = ( dirName . endsWith ( File . separator ) ) ? dirName : dirName + File . separator ; \nFile dir = new File ( destPath + dirName ) ; \nif ( ! dir . exists ( ) ) { \ndir . mkdirs ( ) ; \n} \n} else { \nFile file = new File ( destPath + filename ) ; \nif ( ! file . getParentFile ( ) . exists ( ) ) { \nfile . getParentFile ( ) . mkdirs ( ) ; \n} \ntry ( FileOutputStream fos = new FileOutputStream ( file ) ) { \nbyte [ ] buffer = new byte [ 1024 ] ; \nint read ; \nwhile ( ( read = zis . read ( buffer ) ) != -1 ) { \nfos . write ( buffer , 0 , read ) ; \n} \n} \n} \n} \n} \n} \n} else { \nthrow new IOException ( \"Zip file does not exist: \" + zipName ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 145, "raw_nl": "\u5224\u65ad\u4e24\u4e2a\u6570\u7ec4\u7684\u5185\u5bb9\u662f\u5426\u76f8\u7b49 \u7528\u4e8eequals\u7684\u6bd4\u8f83", "signature": "public boolean equals(Object[] array, Object[] other)", "code": "{ \nint length = array . length ; \nif ( length != other . length ) { \nreturn false ; \n} \nfor ( int i = 0 ; i < length ; i ++ ) { \nif ( ! ( array [ i ] . equals ( other [ i ] ) ) ) { \nreturn false ; \n} \n} \nreturn true ; \n} ", "end_by": "end_token"}
{"task_id": 146, "raw_nl": "Returns a set with all unique methodNames of methods.", "signature": "public Set<String> getMethods(ClassLoader classLoader, String className)", "code": "throws ClassNotFoundException { \nSet < String > methods = new HashSet < > ( ) ; \nClass < ? > clazz = classLoader . loadClass ( className ) ; \nfor ( Method method : clazz . getDeclaredMethods ( ) ) { \nmethods . add ( method . getName ( ) ) ; \n} \nreturn methods ; \n} ", "end_by": "end_token"}
{"task_id": 147, "raw_nl": "Returns the pid of the task", "signature": "String getPid(FutureTask t)", "code": "{ \nif ( t != null ) { \nObject o = t . result ; \nif ( o != null ) { \nreturn o . toString ( ) ; \n} \n} \nreturn null ; \n} ", "end_by": "end_token"}
{"task_id": 148, "raw_nl": "Swaps the elements at the specified positions in the specified list. (If the specified positions are equal, invoking this method leaves the list unchanged.)", "signature": "public <E> void swap(List<E> list, int i, int j)", "code": "{ \nif ( list == null ) { \nthrow new NullPointerException ( ) ; \n} \nif ( i < 0 || i >= list . size ( ) ) { \nthrow new IndexOutOfBoundsException ( \"i < 0 || i >= list.size()\" ) ; \n} \nif ( j < 0 || j >= list . size ( ) ) { \nthrow new IndexOutOfBoundsException ( \"j < 0 || j >= list.size()\" ) ; \n} \nif ( i == j ) { \n// noinspection unchecked\nlist . set ( i , ( E ) list . get ( j ) ) ; \nreturn ; \n} \nE tmp = list . get ( i ) ; \nlist . set ( i , list . get ( j ) ) ; \nlist . set ( j , tmp ) ; \n} ", "end_by": "end_token"}
{"task_id": 149, "raw_nl": "Get the radian between current line(determined by point A and B) and horizontal line.", "signature": "public float getRadian(Point A, Point B)", "code": "{ \nfloat radian = 0 ; \nfloat dx = B . x - A . x ; \nfloat dy = B . y - A . y ; \nif ( dx != 0 ) { \nfloat f = ( float ) Math . atan ( dy / dx ) ; \nradian = ( float ) Math . toDegrees ( f ) ; \n} \nreturn radian ; \n} ", "end_by": "end_token"}
{"task_id": 151, "raw_nl": "Converts from an int array to an Integer array.", "signature": "public Integer[] asObjectArray(int[] array)", "code": "{ \nInteger [ ] objectArray = new Integer [ array . length ] ; \nfor ( int i = 0 ; i < array . length ; i ++ ) objectArray [ i ] = array [ i ] ; \nreturn objectArray ; \n} ", "end_by": "end_token"}
{"task_id": 152, "raw_nl": "\u751f\u621032\u4f4d\u7684MD5\u7801", "signature": "public String toMd5Code(String str)", "code": "{ \nif ( null == str ) { \nreturn null ; \n} \nString code = \"\" ; \ntry { \ncode = new String ( str . getBytes ( \"UTF-8\" ) ) ; \n} catch ( UnsupportedEncodingException e ) { \ne . printStackTrace ( ) ; \n} \nreturn code ; \n} ", "end_by": "end_token"}
{"task_id": 153, "raw_nl": "\u8ba1\u7b97 C2 = M xor t", "signature": "public byte[] calculateC2(byte[] m, byte[] t)", "code": "{ \nif ( m == null || m . length == 0 || t == null || t . length == 0 ) { \nreturn null ; \n} \nbyte [ ] c2 = new byte [ m . length ] ; \nfor ( int i = 0 ; i < m . length ; i ++ ) { \nc2 [ i ] = ( byte ) ( m [ i ] ^ t [ i % t . length ] ) ; \n} \nreturn c2 ; \n} ", "end_by": "end_token"}
{"task_id": 154, "raw_nl": "\u83b7\u53d6\u8d44\u6e90\u6587\u4ef6\u7684url", "signature": "public URL getUrlFile(String fileName)", "code": "{ \nURL url = null ; \nif ( fileName . startsWith ( \"http\" ) ) { \ntry { \nurl = new URL ( fileName ) ; \n} catch ( MalformedURLException e ) { \ne . printStackTrace ( ) ; \n} \n} else { \nClassLoader classLoader = Thread . currentThread ( ) . getContextClassLoader ( ) ; \nif ( classLoader != null ) { \nurl = classLoader . getResource ( fileName ) ; \n} \n} \nreturn url ; \n} ", "end_by": "end_token"}
{"task_id": 156, "raw_nl": "Adds a given vector (array) to another one. * Every element of the second array (missing element is treated to be zero) is added to the corresponding element (if not missing) of the first array.", "signature": "public void addTo(float[] arrayA, float[] arrayB)", "code": "{ \nif ( arrayA . length != arrayB . length ) { \nthrow new RuntimeException ( \"The two arrays must have the same length!\" ) ; \n} \nfor ( int i = 0 ; i < arrayA . length ; i ++ ) { \narrayA [ i ] += arrayB [ i ] ; \n} \n} ", "end_by": "end_token"}
{"task_id": 157, "raw_nl": "Searches backward for value in a given array", "signature": "public int lastIndexOf(float value, float[] array)", "code": "{ \nfor ( int i = array . length -1 ; i >= 0 ; i -- ) { \nif ( array [ i ] == value ) { \nreturn i ; \n} \n} \nreturn -1 ; \n} ", "end_by": "end_token"}
{"task_id": 160, "raw_nl": "\u968f\u673a\u62bd\u53d6\u6307\u5b9a\u6570\u91cf\u7684\u7528\u6237\uff0c\u4f5c\u4e3a\u4e2d\u5956\u7528\u6237", "signature": "public List<String> doDrawRandom(List<String> users, int count)", "code": "{ \nList < String > result = new ArrayList < > ( ) ; \nif ( users == null || users . size ( ) <= 0 ) { \nreturn result ; \n} \nif ( count <= 0 ) { \nreturn result ; \n} \n// \u968f\u673a\u53d6\u4e00\u4e2a\nString user = users . get ( new Random ( ) . nextInt ( users . size ( ) ) ) ; \nresult . add ( user ) ; \n// \u5982\u679c\u53d6\u4e0d\u5230\uff0c\u968f\u673a\u53d6\u4e00\u4e2a\nif ( result . size ( ) == count ) { \nresult . add ( user ) ; \n} \nreturn result ; \n} ", "end_by": "end_token"}
{"task_id": 161, "raw_nl": "Returns the geometric center of this sequence of points", "signature": "public Point getCenter(List<Point> points)", "code": "{ \nif ( points . size ( ) == 0 ) { \nreturn null ; \n} \nint x = 0 ; \nint y = 0 ; \nfor ( Point p : points ) { \nif ( p != null ) { \nx += p . x ; \ny += p . y ; \n} \n} \nreturn new Point ( x / points . size ( ) , y / points . size ( ) ) ; \n} ", "end_by": "end_token"}
{"task_id": 162, "raw_nl": "\u62ec\u53f7\u5339\u914d\u68c0\u6d4b.", "signature": "public boolean checkbracket(String str)", "code": "{ \nString regex = \"\\\\(\" ; \nreturn check ( regex , str ) ; \n} ", "end_by": "end_token"}
{"task_id": 163, "raw_nl": "Move a file or directory from source to destination, recursively copying subdirectories.", "signature": "public void move(Path src, Path dest)", "code": "throws IOException { \nif ( Files . isDirectory ( src ) ) { \nif ( Files . isDirectory ( dest ) ) { \ndest = dest . resolve ( src . getFileName ( ) ) ; \n} \ntry ( DirectoryStream < Path > stream = Files . newDirectoryStream ( src ) ) { \nfor ( Path entry : stream ) { \nmove ( entry , dest . resolve ( src . relativize ( entry ) ) ) ; \n} \n} \n} else { \nFiles . move ( src , dest ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 164, "raw_nl": "Reverse a Map into a ValueSetMap, where each original value is mapped to the set of all its original keys.", "signature": "public <K, V> Map<V, Set<K> > reverseMapIntoValueSetMap(Map<K, V> map)", "code": "{ \nMap < V , Set < K > > reverseMap = new HashMap < V , Set < K > > ( ) ; \nfor ( Map . Entry < K , V > entry : map . entrySet ( ) ) { \nSet < K > keys = reverseMap . get ( entry . getValue ( ) ) ; \nif ( keys == null ) { \nkeys = new HashSet < K > ( ) ; \nreverseMap . put ( entry . getValue ( ) , keys ) ; \n} \nkeys . add ( entry . getKey ( ) ) ; \n} \nreturn reverseMap ; \n} ", "end_by": "end_token"}
{"task_id": 165, "raw_nl": "Decode base64 string to bytes", "signature": "public byte[] base64decode(String base64string)", "code": "{ \nif ( base64string . length ( ) < 1 ) { \nreturn null ; \n} \nreturn Base64 . getDecoder ( ) . decode ( base64string ) ; \n} ", "end_by": "end_token"}
{"task_id": 166, "raw_nl": "\u901a\u8fc7\u53cd\u5c04\u4e3a\u5bf9\u8c61\u7684\u5bf9\u5e94\u5b57\u6bb5\u6ce8\u5165\u503c", "signature": "public <T> T initByReflect(String name, String value, T t)", "code": "{ \nClass < ? > clazz = t . getClass ( ) ; \ntry { \nField field = clazz . getDeclaredField ( name ) ; \nfield . setAccessible ( true ) ; \nfield . set ( t , value ) ; \n} catch ( Exception e ) { \ne . printStackTrace ( ) ; \n} \nreturn t ; \n} ", "end_by": "end_token"}
{"task_id": 167, "raw_nl": "\u5c06\u6570\u7ec4\u8f6c\u4e3a List", "signature": "public <T> List<T> array2List(T[] array)", "code": "{ \nList < T > list = new ArrayList < > ( array . length ) ; \nCollections . addAll ( list , array ) ; \nreturn list ; \n} ", "end_by": "end_token"}
{"task_id": 168, "raw_nl": "\u83b7\u53d6\u8fc7\u53bb7\u5929\u7684\u65f6\u671f(\u5305\u62ec\u4eca\u5929)\uff0c\u683c\u5f0f\u4e3ayymmdd", "signature": "public List<String> getWeekDate()", "code": "{ \nList < String > list = new ArrayList < String > ( ) ; \nfor ( int i = 0 ; i < 7 ; i ++ ) { \nlist . add ( getShortDate ( ) ) ; \n} \nreturn list ; \n} ", "end_by": "end_token"}
{"task_id": 169, "raw_nl": "Returns the total number of bytes remaining in the buffer array.", "signature": "public long remaining(ByteBuffer[] buffers)", "code": "{ \nlong size = 0 ; \nfor ( ByteBuffer buffer : buffers ) { \nsize += buffer . remaining ( ) ; \n} \nreturn size ; \n} ", "end_by": "end_token"}
{"task_id": 170, "raw_nl": "\u8fd4\u56dey\u5e74m\u6708d\u65e5\u5bf9\u5e94\u7684\u519c\u5386.\u8fd4\u56de\u683c\u5f0f\u4e3a\u67d0\u5e74\u67d0\u6708\u67d0\u65e5 ?", "signature": "public String getLunarDate(int year_log, int month_log, int day_log)", "code": "{ \nString message = \"\" ; \nif ( year_log > 0 ) { \nif ( month_log > 0 ) { \nif ( day_log > 0 ) { \nmessage = year_log + \"\u5e74\" + month_log + \"\u6708\" + day_log + \"\u65e5\" ; \n} else { \nmessage = year_log + \"\u5e74\" + month_log + \"\u6708\" + \" \u65e5\" ; \n} \n} else { \nif ( day_log > 0 ) { \nmessage = year_log + \"\u5e74\" + \"\u6708\" + day_log + \"\u65e5\" ; \n} else { \nmessage = year_log + \"\u5e74\" + \"\u6708\" + \" \u65e5\" ; \n} \n} \n} else { \nif ( month_log > 0 ) { \nif ( day_log > 0 ) { \nmessage = month_log + \"\u6708\" + day_log + \"\u65e5\" ; \n} else { \nmessage = month_log + \"\u6708\" + \" \u65e5\" ; \n} \n} else { \nif ( day_log > 0 ) { \nmessage = day_log + \"\u65e5\" ; \n} else { \nmessage = \"\u65e5\" ; \n} \n} \n} \nreturn message ; \n} ", "end_by": "end_token"}
{"task_id": 171, "raw_nl": "\u53bb\u6389\u6d6e\u70b9\u6570\u591a\u4f59\u76840", "signature": "public String rvZeroAndDot(String s)", "code": "{ \nif ( s . isEmpty ( ) ) { \nreturn \"0\" ; \n} \nif ( s . indexOf ( \".\" ) > 0 ) { \ns = s . replaceAll ( \"0+?$\" , \"\" ) ; \n// \u5982\u6700\u540e\u4e00\u4f4d\u662f.\u5219\u53bb\u6389\ns = s . replaceAll ( \"[.]$\" , \"\" ) ; \n} \nreturn s ; \n} ", "end_by": "end_token"}
{"task_id": 172, "raw_nl": "\u5341\u8fdb\u5236\u6574\u578b\u6570\u503c\u51cf\u6cd5\uff0c\u5b57\u7b26\u4e32\u8868\u793a\u6bcf\u4e00\u4e2a\u6570", "signature": "public String bigDecimalSubtract(String str, String str1)", "code": "{ \nBigDecimal bd = new BigDecimal ( str ) ; \nBigDecimal bd1 = new BigDecimal ( str1 ) ; \nreturn rvZeroAndDot ( bd . subtract ( bd1 ) . toPlainString ( ) ) ; \n} ", "end_by": "end_token"}
{"task_id": 173, "raw_nl": "Get the extension of a file. Return a null string if there is no extension.", "signature": "public String getFileExtension(File file)", "code": "{ \nString filename = file . getName ( ) ; \nint i = filename . lastIndexOf ( '.' ) ; \nif ( i > 0 && i < filename . length ( ) -1 ) { \nreturn filename . substring ( i + 1 ) . toLowerCase ( ) ; \n} \nreturn null ; \n} ", "end_by": "end_token"}
{"task_id": 174, "raw_nl": "\u5224\u5b9a\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u4e0d\u662f\u6574\u6570", "signature": "public boolean isInteger(String numberString)", "code": "{ \ntry { \nInteger . parseInt ( numberString ) ; \nreturn true ; \n} catch ( NumberFormatException ex ) { \nreturn false ; \n} \n} ", "end_by": "end_token"}
{"task_id": 176, "raw_nl": "Returns true if the bit at the given position is 1 and false otherwise.", "signature": "public boolean getBinaryState(int position)", "code": "{ \nif ( position < 1 || position > 32 ) { \nthrow new IllegalArgumentException ( \"Position out of bound. Should be between 1 and 32.\" ) ; \n} \nreturn ( ( ( 1 << position ) & ( 1 << position ) ) != 0 ) ; \n} ", "end_by": "end_token"}
{"task_id": 177, "raw_nl": "\u83b7\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684ID", "signature": "public String getProcessId()", "code": "{ \nString name = ManagementFactory . getRuntimeMXBean ( ) . getName ( ) ; \nString pid = name . split ( \"@\" ) [ 0 ] ; \nreturn pid ; \n} ", "end_by": "end_token"}
{"task_id": 178, "raw_nl": "Handles comparison between version numbers (the right way(TM))\uff0cbigger return 1 \uff0csmaller return -1 and equals return 0. Examples of version strings: 1.6.7, 1.2_b10", "signature": "public int versionCompare(String v1, String v2)", "code": "{ \nString [ ] v1Parts = v1 . split ( \"\\\\.\" ) ; \nString [ ] v2Parts = v2 . split ( \"\\\\.\" ) ; \nint i = 0 ; \nwhile ( i < v1Parts . length && i < v2Parts . length && v1Parts [ i ] . equals ( v2Parts [ i ] ) ) { \ni ++ ; \n} \nif ( i < v1Parts . length && i < v2Parts . length ) { \nreturn Integer . valueOf ( v1Parts [ i ] ) . compareTo ( Integer . valueOf ( v2Parts [ i ] ) ) ; \n} \nreturn Integer . valueOf ( v1Parts [ v1Parts . length -1 ] ) . compareTo ( Integer . valueOf ( v2Parts [ v2Parts . length -1 ] ) ) ; \n} ", "end_by": "end_token"}
{"task_id": 179, "raw_nl": "\u5728map\u4e2d\uff0c\u5982\u679ckey\u5b58\u5728,\u5219value\u76f8\u52a0\uff1b\u5982\u679ckey \u4e0d\u5b58\u5728\uff0c\u589e\u52a0\u65b0\u7684key\uff0cvalue", "signature": "public Long incrBy(Map<String,Long> valMap,String key, Long integer)", "code": "{ \nif ( valMap . containsKey ( key ) ) { \nreturn valMap . put ( key , valMap . get ( key ) + integer ) ; \n} else { \nvalMap . put ( key , integer ) ; \nreturn valMap . get ( key ) ; \n} \n} ", "end_by": "end_token"}
{"task_id": 180, "raw_nl": "Check if a string is binary, which is composed of 0/1, and string length is multiple of 8.", "signature": "public boolean isBin(String bin)", "code": "{ \nif ( bin == null || bin . length ( ) % 8 != 0 ) { \nreturn false ; \n} \nreturn true ; \n} ", "end_by": "end_token"}
{"task_id": 181, "raw_nl": "\u901a\u8fc7\u53cd\u5c04, \u83b7\u5f97Class\u5b9a\u4e49\u4e2d\u58f0\u660e\u7684\u6cdb\u578b\u53c2\u6570\u7684\u7c7b\u578b. \u5982\u65e0\u6cd5\u627e\u5230, \u8fd4\u56deObject.class.", "signature": "public Class getClassGenricType(Class clazz)", "code": "{ \nType genType = clazz . getGenericSuperclass ( ) ; \nif ( ! ( genType instanceof ParameterizedType ) ) { \nlogger . debug ( clazz . getSimpleName ( ) + \"'s superclass not ParameterizedType\" ) ; \nreturn Object . class ; \n} \nType [ ] params = ( ( ParameterizedType ) genType ) . getActualTypeArguments ( ) ; \nif ( params . length != 1 ) { \nlogger . debug ( clazz . getSimpleName ( ) + \" not only one type\" ) ; \nreturn Object . class ; \n} \nif ( ! ( params [ 0 ] instanceof Class ) ) { \nlogger . debug ( clazz . getSimpleName ( ) + \" not only class\" ) ; \nreturn Object . class ; \n} \nreturn ( Class ) params [ 0 ] ; \n} ", "end_by": "end_token"}
{"task_id": 182, "raw_nl": "\u6ee4\u6389\u8bcd\u4e32\u4e2d\u7684\u7a7a\u683c\u3001\u6807\u70b9\u7b26\u53f7", "signature": "public String[] filter(String[] word_list)", "code": "{ \nList < String > results = new ArrayList < String > ( ) ; \nfor ( String w : word_list ) { \nif ( ! FILTER_CHARS . contains ( w ) ) { \nresults . add ( w . toLowerCase ( ) ) ; \n} \n} \nreturn results . toArray ( new String [ results . size ( ) ] ) ; \n} ", "end_by": "end_token"}
{"task_id": 183, "raw_nl": "BigDecimal\u52a0\u6cd5\u8fd0\u7b97", "signature": "public BigDecimal add(BigDecimal aVal, BigDecimal bVal)", "code": "{ \nif ( aVal == null ) { \naVal = BigDecimal . ZERO ; \n} \nif ( bVal == null ) { \nbVal = BigDecimal . ZERO ; \n} \nreturn aVal . add ( bVal ) ; \n} ", "end_by": "end_token"}
{"task_id": 186, "raw_nl": "Returns whether or no the JDK version is 1.7u40 and above.", "signature": "public boolean isJdk7u40Above()", "code": "{ \ncheckJdkVersion ( ) ; \nreturn _currentVersion . compareVersion ( 1.7 , 0 , 40 ) >= 0 ; \n} ", "end_by": "end_token"}