{
  "line_num": 259,
  "needModifyNL": "false",
  "raw_nl": "Take a collection of Strings and return a combined string as a comma separated list with 'and' between the final pair. For example: [a, b, c] to \"a, b and c\".",
  "correctness": 3,
  "quality": 3,
  "maintainability": 3,
  "signature": "public static String collectionToCommaDelimitedString(List<String> coll)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 322,
  "needModifyNL": "false",
  "raw_nl": "Creates a padding string of a certain length",
  "correctness": 4,
  "quality": 1,
  "maintainability": 4,
  "Cyclomatic":2,
  "signature": "public String createPadding(int length, char padChar)"
}
{
  "line_num": 35,
  "needModifyNL": "true",
  "raw_nl": "Create and returns a HttpURLConnection connection to a webpage",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":2,
  "signature": "public HttpURLConnection createHttpConnection(URL url, int connectTimeout, Map<String, String> requestProperties)"
}
{
  "line_num": 104,
  "needModifyNL": "false",
  "raw_nl": "Getting a File’s Mime Type",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":1,
  "signature": "public String getMimeType(File file)"
}
{
  "line_num": 344,
  "needModifyNL": "false",
  "raw_nl": "Write content to the file. If file does not exist, it will create one.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":1,
  "signature": "public void writeToFile(String content, String fileName)"
}
{
  "line_num": 272,
  "needModifyNL": "false",
  "raw_nl": "Close Reader. If object is null it is ignored",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":-1,
  "signature": "public void close(Reader reader)"
}
{
  "line_num": 114,
  "needModifyNL": "false",
  "raw_nl": "max() that works on three integers. Like many of the other max() functions in this class",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":3,
  "signature": "public static float max(float a, float b, float c) "
}
{
  "line_num": 95,
  "needModifyNL": "false",
  "raw_nl": "put a short value into a byte array with specific offset",
  "correctness": 4,
  "quality": 1,
  "maintainability": 3,
  "Cyclomatic":1,
  "signature": "public void putShort(byte[] data, short value, int offset)"
}
{
  "line_num": 250,
  "needModifyNL": "false",
  "raw_nl": "从 http 服务拉取配置文件并解析为Properties 对象",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":1,
  "signature": "public Properties getProperties(String url)"
}
{
  "line_num": 3,
  "needModifyNL": "false",
  "raw_nl": "判断类是否是单例，单例对象有 Singleton 注解",
  "correctness": 3,
  "quality": 2,
  "maintainability": 0,
  "signature": "public static boolean isSingleton(Class<?> clazz)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 253,
  "needModifyNL": "false",
  "raw_nl": "给一个数组，找出最大值并且返回。",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":3,
  "signature": "public int findMaxNumber(int[] nums)"
}

{
  "line_num": 366,
  "needModifyNL": "false",
  "raw_nl": "将 Date 类型转为时间字符串，格式为 format",
  "correctness": 4,
  "quality": 3,
  "maintainability": 3,
  "Cyclomatic":1,
  "signature": "public String date2String(final Date date, final DateFormat format)"
}
{
  "line_num": 325,
  "needModifyNL": "false",
  "raw_nl": "将HttpServletRequest里的cookie装入到Map<String, String>里面",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":2,
  "signature": "public Map<String, String> getCookieMap(HttpServletRequest request)"
}
{
  "line_num": 277,
  "needModifyNL": "false",
  "raw_nl": "Gives a string consisting of the given character repeated the given number of times.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":2,
  "signature": "public String repeat(char ch, int count)"
}
{
  "line_num": 295,
  "needModifyNL": "false",
  "raw_nl": "Handles the mouseReleased event by invoking the mouseReleased methods on listener-a and listener-b.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 3,
  "Cyclomatic":1,
  "signature": "public void mouseReleased(MouseEvent e)"
}
{
  "line_num": 33,
  "needModifyNL": "false",
  "raw_nl": "Logs the given throwable and shows an error alert dialog with its message.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":1,
  "signature": "public static void logAndShow(Throwable t)"
}
{
  "line_num": 103,
  "needModifyNL": "false",
  "raw_nl": "Looks through the backups directory and assembles a list of all json backup files found. ",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":2,
  "signature": "private List<String> getBackupFiles(String dir)"
}

{
  "line_num": 87,
  "needModifyNL": "false",
  "raw_nl": "Reads the next 8 bits from standard input and return as an 8-bit char.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static char readChar()",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 306,
  "needModifyNL": "false",
  "raw_nl": "Rearranges the elements of the specified subarray in random order.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static void shuffle(int[] array)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 291,
  "needModifyNL": "false",
  "raw_nl": "Release current outputStream, if the output stream is not null, else ignore it ",
  "correctness": 3,
  "quality": 3,
  "maintainability": 4,
  "signature": "public void releaseOutputStream()",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 11,
  "needModifyNL": "false",
  "raw_nl": "Retrieves the value by specified int index of the given List.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static String getValue(List<String> list, int index)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 370,
  "needModifyNL": "true",
  "raw_nl": "Returns a collection containing those threads that may be waiting on the given condition associated with the write lock",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "Returns a collection containing those threads that may be waiting on the given condition associated with the write lock",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 263,
  "needModifyNL": "true",
  "raw_nl": "Returns a string, consisting of given length random char from given alphabet. ",
  "correctness": 3,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static String randomString(int length, String alphabet)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 286,
  "needModifyNL": "false",
  "raw_nl": "用1到n随机初始化二维数组",
  "correctness": 4,
  "quality": 3,
  "maintainability": 3,
  "signature": "public static void init(int[][] arr, int n) ",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 402,
  "needModifyNL": "false",
  "raw_nl": "Copy a file from source path to destination path",
  "correctness": 3,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static void copyFile(String sourcePath, String destPath)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 52,
  "needModifyNL": "false",
  "raw_nl": "Get a hashCode for the real vector. All NaN values have the same hash code.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static int hashCode(double[] vector)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 311,
  "needModifyNL": "false",
  "raw_nl": "Parses character set name to Charset object",
  "correctness": 3,
  "quality": 2,
  "maintainability": 2,
  "signature": "public static Charset charsetForName(String charsetName)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 24,
  "needModifyNL": "true",
  "raw_nl": "Reads up to len bytes of data from this input stream into an array of bytes",
  "correctness": 3,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static byte[] readBytes(java.io.InputStream in, int len)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 307,
  "needModifyNL": "false",
  "raw_nl": "Parses query string to Map from an url.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static Map<String, String> parseQueryString(String queryString)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 320,
  "needModifyNL": "false",
  "raw_nl": "Returns the value of an array by index, or null if the array has no value at that index.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static Object get(Object[] array, int index)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 34,
  "needModifyNL": "false",
  "raw_nl": "Set the additional (undeclared) property with the specified name and value. If the property does not already exist, create it otherwise replace it.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "public void putAdditionalProperty(String key, Object value, Map<String, Object> additionalProperties)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 75,
  "needModifyNL": "false",
  "raw_nl": "Read the base64 encoded image data from a JPEG image.",
  "correctness": 3,
  "quality": 2,
  "maintainability": 3,
  "signature": "public static String readImageData(String filename)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 54,
  "needModifyNL": "false",
  "raw_nl": "Returns the distance for the two given point",
  "correctness": 4,
  "quality": 3,
  "maintainability": 3,
  "Cyclomatic":-1,
  "signature": "public float distance(float x0, float y0, float x1, float y1)"
}
{
  "line_num": 69,
  "needModifyNL": "false",
  "raw_nl": "Writes a collection of Strings to a File, overwriting any previous file contents. Each String is converted into a line in the File.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":-1,
  "signature": "public void writeFile(Collection<String> lines, File file)"
}
{
  "line_num": 100,
  "needModifyNL": "false",
  "raw_nl": "Generate a hex string for the specified bytes.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "Cyclomatic":-1,
  "signature": "public static final String toHex(byte[] byteArr)"
}
{
  "line_num": 66,
  "needModifyNL": "false",
  "raw_nl": "Get the package name of an Object.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static String getPackageName(Object obj)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 7,
  "needModifyNL": "false",
  "raw_nl": "获取相应文件filepath的input stream",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static java.io.InputStream getInputStream(String filepath)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 91,
  "needModifyNL": "false",
  "raw_nl": "获取类上具有指定注解的接口的名称，如果有多个，则以第一个为准 找不到符合条件的接口则返回 clazz 类的名称",
  "correctness": 3,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static String getInterfaceName(Class<?> clazz, Class<? extends Annotation> annotation)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 362,
  "needModifyNL": "false",
  "raw_nl": "Split the given sequence with the given delimiter and return list of values.",
  "correctness": 4,
  "quality": 3,
  "maintainability": 4,
  "signature": "public static java.util.List<String> split(String sequence, String delimiter)",
  "Cyclomatic": -1,
  "code_len": 0
}
{
  "line_num": 358,
  "needModifyNL": "false",
  "raw_nl": "This returns the euclidean distance of two vectors sum(i=1,n) (q_i - p_i)^2",
  "correctness": 4,
  "quality": 3,
  "maintainability": 3,
  "signature": "public static double euclideanDistance(double[] p, double[] q)",
  "Cyclomatic": -1,
  "code_len": 0
}








{
  "task_id": 104,
  "line_num": 1011,
  "raw_nl": "Puts a byte and a short into this byte vector. The byte vector is automatically enlarged if necessary.",
  "raw_code": "final ByteVector put12(final int byteValue, final int shortValue) {\n    int currentLength = length;\n    if (currentLength + 3 > data.length) {\n        enlarge(3);\n    }\n    byte[] currentData = data;\n    currentData[currentLength++] = (byte) byteValue;\n    currentData[currentLength++] = (byte) (shortValue >>> 8);\n    currentData[currentLength++] = (byte) shortValue;\n    length = currentLength;\n    return this;\n}",
  "signature": "public void putShort(byte[] data, byte b, short s)"
}
{
  "task_id": 105,
  "line_num": 1018,
  "raw_nl": "Advances the iterator either forward or backward the specified number of steps. Negative values move backward, and positive values move forward. This is equivalent to repeatedly calling next() or previous().",
  "raw_code": "@Override\npublic int next(int n) {\n    int result = current();\n    while (n > 0) {\n        result = handleNext();\n        --n;\n    }\n    while (n < 0) {\n        result = previous();\n        ++n;\n    }\n    return result;\n}",
  "signature": "public int next(Iterator<Integer> iterator, int n)"
}
{
  "task_id": 106,
  "line_num": 1028,
  "raw_nl": "一维数组转为二维数组，width表示列数，height表示行数",
  "raw_code": "public static int[][] arrayToMatrix(int[] m, int width, int height) {\n    int[][] result = new int[height][width];\n    for (int i = 0; i < height; i++) {\n        for (int j = 0; j < width; j++) {\n            int p = j * height + i;\n            result[i][j] = m[p];\n        }\n    }\n    return result;\n}",
  "signature": "public int[][] arrayToMatrix(int[] m, int width, int height)"
}
{
  "task_id": 107,
  "line_num": 1043,
  "raw_nl": "Verifies that the given array is not null or empty.",
  "raw_code": "public static int[] checkNotNullOrEmpty(@Nullable int[] array) {\n    if (array == null) {\n        throw new NullPointerException();\n    }\n    if (array.length == 0) {\n        throw new IllegalArgumentException();\n    }\n    return array;\n}",
  "signature": "public boolean checkNotNullOrEmpty(int[] array)"
}
{
  "task_id": 108,
  "line_num": 1170,
  "raw_nl": "Removes all white spaces from a string A whitespace is identified using the Java method Character.isWhiteSpace",
  "raw_code": "public static String removeWhiteSpaces(String s) {\n    StringBuilder sb = new StringBuilder(s);\n    int j = 0;\n    for (int i = 0; i < s.length(); i++) {\n        char c = s.charAt(i);\n        if (Character.isWhitespace(c) == false) {\n            sb.setCharAt(j, c);\n            j++;\n        }\n    }\n    sb.setLength(j);\n    return sb.toString();\n}",
  "signature": "public String removeAllWhiteSpaces(String str)"
}
{
  "task_id": 109,
  "line_num": 1187,
  "raw_nl": "subtract b from a",
  "raw_code": "public static String[] sub(String[] a, String[] b) {\n    TreeSet<String> s = new TreeSet<>(Arrays.asList(a));\n    s.removeAll(Arrays.asList(b));\n    if (s.size() != a.length) {\n        return s.toArray(new String[s.size()]);\n    } else {\n        return a;\n    }\n}",
  "signature": "public String[] sub(String[] a, String[] b)"
}
{
  "task_id": 110,
  "line_num": 1230,
  "raw_nl": "Converts the string argument into a float value.",
  "raw_code": "public static float parseFloat(String lexicalXSDFloat) {\n    if (theConverter == null)\n        initConverter();\n    return theConverter.parseFloat(lexicalXSDFloat);\n}",
  "signature": "public float parseFloat(String floatStr)"
}
{
  "task_id": 111,
  "line_num": 1286,
  "raw_nl": "Return true if the local path is a Windows absolute path.",
  "raw_code": "private static boolean isWindowsAbsolutePath(String systemId) {\n    if (!isAbsolutePath(systemId))\n        return false;\n    // On Windows, an absolute path starts with \"[drive_letter]:\\\".\n    if (systemId.length() > 2 && systemId.charAt(1) == ':' && Character.isLetter(systemId.charAt(0)) && (systemId.charAt(2) == '\\\\' || systemId.charAt(2) == '/'))\n        return true;\n    else\n        return false;\n}",
  "signature": "private boolean isWindowsAbsolutePath(String path)"
}
{
  "task_id": 112,
  "line_num": 1310,
  "raw_nl": "Calculates the distance between two points in high-dimensional space.",
  "raw_code": "public static double length(double[] p0, double[] p1) {\n    double[] v = Geometry.createVector(p0, p1);\n    return length(v);\n}",
  "signature": "public double length(double[] p0, double[] p1)"
}
{
  "task_id": 113,
  "line_num": 1320,
  "raw_nl": "This function takes an array of words, and returns a string with all the words in the separated by a space.",
  "raw_code": "private String getStringfromStringArray(String[] array) {\n    if (array == null) {\n        return null;\n    }\n    String s = new String();\n    for (int i = 0; i < array.length; i++) {\n        if (i == 0) {\n            s += array[i];\n        } else {\n            s += \" \" + array[i];\n        }\n    }\n    return s;\n}",
  "signature": "public String getStringfromStringArray(String[] array)"
}
{
  "task_id": 114,
  "line_num": 3530,
  "raw_nl": "Check whether a file is actually a valid zip",
  "raw_code": "public static boolean isValidZip(File zip) {\n    try {\n        ZipFile zf = new ZipFile(zip);\n        zf.close();\n        return true;\n    } catch (IOException e) {\n        throw new IORuntimeException(\"Not a valid zip: \" + zip, e);\n    }\n}",
  "signature": "public boolean isValidZip(File zip)"
}
{
  "task_id": 115,
  "line_num": 3587,
  "raw_nl": "Parse a list of longs into strings.",
  "raw_code": "private static String[] toTimestampStrs(long[] timestamps) {\n    if (timestamps == null) {\n        return null;\n    }\n    String[] result = new String[timestamps.length];\n    for (int i = 0; i < timestamps.length; ++i) {\n        result[i] = Long.toString(timestamps[i]);\n    }\n    return result;\n}",
  "signature": "public String[] toTimestampStrs(long[] timestamps)"
}
{
  "task_id": 116,
  "line_num": 3595,
  "raw_nl": "Change the size of this array. Content between indexes 0 and min(size(), newSize) will be preserved.",
  "raw_code": "@Override\npublic void resize(long newSize) {\n    final int numPages = numPages(newSize);\n    if (numPages > pages.length) {\n        pages = Arrays.copyOf(pages, ArrayUtil.oversize(numPages, RamUsageEstimator.NUM_BYTES_OBJECT_REF));\n    }\n    for (int i = numPages - 1; i >= 0 && pages[i] == null; --i) {\n        pages[i] = newLongPage(i);\n    }\n    for (int i = numPages; i < pages.length && pages[i] != null; ++i) {\n        pages[i] = null;\n        releasePage(i);\n    }\n    this.size = newSize;\n}",
  "signature": "public int[] resize(int[] arr,long newSize)"
}
{
  "task_id": 117,
  "line_num": 3644,
  "raw_nl": "截取指定长度的数组",
  "raw_code": "public static byte[] subBytes(byte[] src, int pos, int count) {\n    byte[] dest = new byte[count];\n    System.arraycopy(src, pos, dest, 0, count);\n    return dest;\n}",
  "signature": "public byte[] subBytes(byte[] src, int pos, int count)"
}
{
  "task_id": 118,
  "line_num": 3820,
  "raw_nl": "返回不小于输入值value的最小整数",
  "raw_code": "@FunctionMethod(value = \"ceil\", alias = \"ceil\", comment = \"返回不小于输入值value的最小整数\")\npublic Double ceil(IMessage message, FunctionContext context, @FunctionParamter(value = \"Integer\", comment = \"代表要求值的Integer常量\") Integer number) {\n    Double result = null;\n    if (number == null) {\n        return result;\n    }\n    result = Math.ceil(number);\n    return result;\n}",
  "signature": "public int floor(double val)"
}
{
  "task_id": 119,
  "line_num": 3881,
  "raw_nl": "保留两位小数",
  "raw_code": "public static String getPrice(String price, int formatType) {\n    if (isNotEmpty(price, true) == false) {\n        return getPrice(0, formatType);\n    }\n    String correctPrice = \"\";\n    String s;\n    for (int i = 0; i < price.length(); i++) {\n        s = price.substring(i, i + 1);\n        if (\".\".equals(s) || isNumer(s)) {\n            correctPrice += s;\n        }\n    }\n    Log.i(TAG, \"getPrice  <<<<<<<<<<<<<<<<<< correctPrice =  \" + correctPrice);\n    if (correctPrice.contains(\".\")) {\n        if (correctPrice.endsWith(\".\")) {\n            correctPrice = correctPrice.replaceAll(\".\", \"\");\n        }\n    }\n    Log.i(TAG, \"getPrice correctPrice =  \" + correctPrice + \" >>>>>>>>>>>>>>>>\");\n    return isNotEmpty(correctPrice, true) ? getPrice(new BigDecimal(0 + correctPrice), formatType) : getPrice(0, formatType);\n}",
  "signature": "public String formatDouble(double val)"
}
{
  "task_id": 120,
  "line_num": 3888,
  "raw_nl": "Compares the two specified double values,return 1 if the first value is greater than the second value,-1 if the first value is less than the second value,0 if the two values are equal. There are two special cases: Double.NaN is equal to Double.NaN and it is greater than any other double value, including Double.POSITIVE_INFINITY; +0.0d is greater than -0.0d",
  "raw_code": "public static int compare(double double1, double double2) {\n    // Non-zero, non-NaN checking.\n    if (double1 > double2) {\n        return 1;\n    }\n    if (double2 > double1) {\n        return -1;\n    }\n    if (double1 == double2 && 0.0d != double1) {\n        return 0;\n    }\n    // NaNs are equal to other NaNs and larger than any other double\n    if (isNaN(double1)) {\n        if (isNaN(double2)) {\n            return 0;\n        }\n        return 1;\n    } else if (isNaN(double2)) {\n        return -1;\n    }\n    long d1 = doubleToRawLongBits(double1);\n    long d2 = doubleToRawLongBits(double2);\n    return (int) ((d1 >> 63) - (d2 >> 63));\n}",
  "signature": "public int compare(double double1, double double2)"
}
{
  "task_id": 121,
  "line_num": 3890,
  "raw_nl": "Get the index of the next slash.",
  "raw_code": "public static int getNextSlash(String path, int index) {\n    assert isValid(path) : \"Invalid path [\" + path + \"]\";\n    return path.indexOf('/', index);\n}",
  "signature": "public int getNextSlash(String path, int index)"
}
{
  "task_id": 122,
  "line_num": 3894,
  "raw_nl": "Returns true iff all entries of (all subarrays of) the input array are >= 0. Returns true if the array is non-null, but empty",
  "raw_code": "private boolean isNonNegative(long[][] in) {\n    for (int i = 0; i < in.length; i++) {\n        for (int j = 0; j < in[i].length; j++) {\n            if (in[i][j] < 0) {\n                return false;\n            }\n        }\n    }\n    return true;\n}",
  "signature": "public boolean isNonNegative(long[][] in)"
}
{
  "task_id": 123,
  "line_num": 3897,
  "raw_nl": "Returns maximum possible integer, less or equal than oldValue, divisible by quantum.",
  "raw_code": "public static int floor(int x, int quantum) {\n    int dx = (x > 0) || (x % quantum == 0) ? 0 : -1;\n    return (x / quantum + dx) * quantum;\n}",
  "signature": "public int floor(int x, int quantum)"
}
{
  "task_id": 124,
  "line_num": 3911,
  "raw_nl": "Appends an item to the list.",
  "raw_code": "public void append(Value v) {\n    if (length == items.length) {\n        Value[] t = new Value[length * 2];\n        System.arraycopy(items, 0, t, 0, length);\n        items = t;\n    }\n    items[length++] = v;\n}",
  "signature": "public void append(List<String> list, String item)"
}
{
  "task_id": 125,
  "line_num": 6004,
  "raw_nl": "判断某个日期属于本月的第几天",
  "raw_code": "public static int getDaysByMonth(String dateTime) throws ParseException {\n    Calendar cal = Calendar.getInstance();\n    SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd\");\n    Date date = dateFormat.parse(dateTime);\n    cal.setTime(date);\n    int day = cal.get(Calendar.DAY_OF_MONTH);\n    return day;\n}",
  "signature": "public int getDaysByMonth(String dateTime)"
}
{
  "task_id": 126,
  "line_num": 6028,
  "raw_nl": "Unzip the contents of the given zip in the given directory (create it if it doesn't exist)",
  "raw_code": "public static void unzip(String zipPath, String destDirPath) throws IOException {\n    InputStream zipIn = new FileInputStream(zipPath);\n    byte[] buf = new byte[8192];\n    File destDir = new File(destDirPath);\n    ZipInputStream zis = new ZipInputStream(zipIn);\n    FileOutputStream fos = null;\n    try {\n        ZipEntry zEntry;\n        while ((zEntry = zis.getNextEntry()) != null) {\n            // if it is empty directory, create it\n            if (zEntry.isDirectory()) {\n                new File(destDir, zEntry.getName()).mkdirs();\n                continue;\n            }\n            // if it is a file, extract it\n            String filePath = zEntry.getName();\n            int lastSeparator = filePath.lastIndexOf(\"/\");\n            String fileDir = \"\";\n            if (lastSeparator >= 0) {\n                fileDir = filePath.substring(0, lastSeparator);\n            }\n            // create directory for a file\n            new File(destDir, fileDir).mkdirs();\n            // write file\n            File outFile = new File(destDir, filePath);\n            fos = new FileOutputStream(outFile);\n            int n = 0;\n            while ((n = zis.read(buf)) >= 0) {\n                fos.write(buf, 0, n);\n            }\n            fos.close();\n        }\n    } catch (IOException ioe) {\n        if (fos != null) {\n            try {\n                fos.close();\n            } catch (IOException ioe2) {\n            }\n        }\n    } finally {\n        try {\n            zipIn.close();\n            if (zis != null)\n                zis.close();\n        } catch (IOException ioe) {\n        }\n    }\n}",
  "signature": "public void unzip(String zipPath, String destDirPath)"
}
{
  "task_id": 127,
  "line_num": 6053,
  "raw_nl": "returns a array including given range. [start, end)",
  "raw_code": "public static int[] range(int start, int end) {\n    int[] results = new int[end - start];\n    int index = 0;\n    for (int i = start; i < end; i++) {\n        results[index++] = i;\n    }\n    return results;\n}",
  "signature": "public int[] range(int start, int end)"
}
{
  "task_id": 128,
  "line_num": 6076,
  "raw_nl": "Clear the given calendar, setting to zero all time values less than or equal to that of the given field. For example, clearing to Calendar#HOUR will floor the time to nearest hour which occurred before or at the given time (e.g., 1:32 --> 1:30).",
  "raw_code": "public static Calendar clearTo(Calendar c, int field) {\n    int i = CALENDAR_FIELDS.length - 1;\n    for (; i >= 1 && field != CALENDAR_FIELDS[i]; i--) {\n        int val = (CALENDAR_FIELDS[i] == Calendar.DATE ? 1 : 0);\n        c.set(CALENDAR_FIELDS[i], val);\n    }\n    if (isMultiYear(field)) {\n        int y = c.get(Calendar.YEAR);\n        y = -field * (y / -field);\n        c.set(Calendar.YEAR, y);\n    }\n    return c;\n}",
  "signature": "public Calendar clearTo(Calendar c, int field)"
}
